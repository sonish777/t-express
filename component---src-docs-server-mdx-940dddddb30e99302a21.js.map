{"version":3,"sources":["webpack:///../src/docs/server.mdx"],"names":["_frontmatter","Object","isExtensible","prototype","hasOwnProperty","call","defineProperty","configurable","value","name","filename","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"mappings":"2RAMaA,EAAe,QAAG,IAAAA,UAAAC,OAAAD,IAAAC,OAAAC,aAAAF,KAAAC,OAAAE,UAAAC,eAAAC,KAAAL,EAAA,eAAAC,OAAAK,eAAAN,EAAA,cAAAO,cAAA,EAAAC,MAAA,CAAAC,KAAA,eAAAC,SAAA,yBAC/B,MAAMC,EAAc,CAClBX,gBAEIY,EAAYC,IACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIE,EAAKC,YAAAH,EAAAI,GAER,OAAOC,YAACR,EAASS,YAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,cAG5EF,YAAA,MACE,GAAM,UAAQ,UAEhBA,YAAA,qEAAgEA,YAAA,cAAYG,WAAW,KAAG,QAAsB,aAChHH,YAAA,MACE,GAAM,yBAAuB,yBAE/BA,YAAA,uKACAA,YAAA,WAAKA,YAAA,QAAMG,WAAW,MAClB,UAAa,uBAAqB,8CAGtCH,YAAA,MACE,GAAM,kBAAgB,kBAExBA,YAAA,iNACAA,YAAA,MACE,GAAM,yBAAuB,yBAE/BA,YAAA,UACEA,YAAA,MAAIG,WAAW,MACbH,YAAA,KAAGG,WAAW,MAAKH,YAAA,cAAYG,WAAW,KAAG,QAAsBH,YAAA,MAAIG,WAAW,MAAS,0GAG7FH,YAAA,MAAIG,WAAW,MACbH,YAAA,KAAGG,WAAW,MAAKH,YAAA,cAAYG,WAAW,KAAG,eAA6BH,YAAA,MAAIG,WAAW,MAAS,uKAGpGH,YAAA,MAAIG,WAAW,MACbH,YAAA,KAAGG,WAAW,MAAKH,YAAA,cAAYG,WAAW,KAAG,uBAAqCH,YAAA,MAAIG,WAAW,MAAS,kMAE1GH,YAAA,cAAYG,WAAW,MACrBH,YAAA,KAAGG,WAAW,cAAY,mGAG9BH,YAAA,MAAIG,WAAW,MACbH,YAAA,KAAGG,WAAW,MAAKH,YAAA,cAAYG,WAAW,KAAG,qBAAmCH,YAAA,MAAIG,WAAW,MAAS,2OAExGH,YAAA,cAAYG,WAAW,MACrBH,YAAA,KAAGG,WAAW,cAAY,+CAAiDH,YAAA,cAAYG,WAAW,KAAG,oBAAkC,yBAG3IH,YAAA,MAAIG,WAAW,MACbH,YAAA,KAAGG,WAAW,MAAKH,YAAA,cAAYG,WAAW,KAAG,iBAA+BH,YAAA,MAAIG,WAAW,MAAS,gFAGtGH,YAAA,MAAIG,WAAW,MACbH,YAAA,KAAGG,WAAW,MAAKH,YAAA,cAAYG,WAAW,KAAG,UAAwBH,YAAA,MAAIG,WAAW,MAAS,yEAC9BH,YAAA,cAAYG,WAAW,KAAG,UAAwB,gBAAiBH,YAAA,cAAYG,WAAW,KAAG,oBAAkC,OAGlMH,YAAA,WAAKA,YAAA,QAAMG,WAAW,MAClB,UAAa,uBAAqB,qyBA6BzC,IAAAT,UAAAb,OAAAa,IAAAb,OAAAC,aAAAY,KAAAb,OAAAE,UAAAC,eAAAC,KAAAS,EAAA,eAAAb,OAAAK,eAAAQ,EAAA,cAAAP,cAAA,EAAAC,MAAA,CAAAC,KAAA,aAAAC,SAAA,yBAEDI,EAAWU,gBAAiB","file":"component---src-docs-server-mdx-940dddddb30e99302a21.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"C:/Users/Sonish Maharjan/Desktop/texpress/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"server\"\n    }}>{`Server`}</h1>\n    <p>{`Every application starts with a server imported from the `}<inlineCode parentName=\"p\">{`core`}</inlineCode>{` package.`}</p>\n    <h2 {...{\n      \"id\": \"server-initialization\"\n    }}>{`Server Initialization`}</h2>\n    <p>{`Create a new Server instance by passing a controllers parameter. controllers refers to the set of controllers that handle incoming requests and responses.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const server = new Server(controllers);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"server-startup\"\n    }}>{`Server Startup`}</h2>\n    <p>{`The server is then started by calling the startup method of the Server instance. It takes two parameters: the port on which the server will run and an object with additional configuration options.`}</p>\n    <h3 {...{\n      \"id\": \"configuration-options\"\n    }}>{`Configuration Options`}</h3>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`name`}</inlineCode><br parentName=\"p\"></br>{`\n`}{`The name option sets the name of the server, which is useful for logging and debugging purposes.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`middlewares`}</inlineCode><br parentName=\"p\"></br>{`\n`}{`The middlewares option is an array of middleware functions that will be used by the server. In this case, middlewares includes the methodOverride middleware.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`middlewareProviders`}</inlineCode><br parentName=\"p\"></br>{`\n`}{`The middlewareProviders option is an array of middleware providers. Middleware providers are used to add more advanced middleware to the server, such as CORS or Passport authentication.`}</p>\n        <blockquote parentName=\"li\">\n          <p parentName=\"blockquote\">{`Middleware Providers are middlewares too, but the ones that require some extra configuration.`}</p>\n        </blockquote>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`exceptionHandlers`}</inlineCode><br parentName=\"p\"></br>{`\n`}{`The exceptionHandlers option is an array of exception handlers that will be used by the server. In this case, exceptionHandlers includes ApiExceptionHandler, which handles API exceptions and returns appropriate HTTP responses.`}</p>\n        <blockquote parentName=\"li\">\n          <p parentName=\"blockquote\">{`Exception Handlers are classes that extends `}<inlineCode parentName=\"p\">{`ExceptionHandler`}</inlineCode>{` from core package.`}</p>\n        </blockquote>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`routePrefixes`}</inlineCode><br parentName=\"p\"></br>{`\n`}{`The routePrefixes option is used to set prefixes to cms or api routes.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`locals`}</inlineCode><br parentName=\"p\"></br>{`\n`}{`The locals option is an array of values that are forwared to the `}<inlineCode parentName=\"p\">{`locals`}</inlineCode>{` variable of `}<inlineCode parentName=\"p\">{`Express.Response`}</inlineCode>{`.`}</p>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`server.startup(Number(ServerConfig.PORT), {\n    name: 'Server Name',\n    middlewares: [methodOverride('_')],\n    middlewareProviders: [\n        CORSProvider,\n        PassportProvider,\n        provideMiddleware <\n            StaticServeProviderOptions >\n            (StaticServeProvider,\n            {\n                pathToStaticContents: path.join(__dirname, '../public'),\n                prefix: 'static',\n            }),\n    ],\n    locals: [\n        { error: (req) => req.flash('error') }, // available in res.locals.error\n        { message: (req) => req.flash('message') },\n        { url: (req) => req.url },\n        { query: (req) => req.query },\n    ],\n    exceptionHandlers: [new ApiExceptionHandler()],\n    routePrefixes: {\n        cmsPrefix: 'cms',\n    },\n});\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}