(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{"Jzi+":function(e,t,r){"use strict";r.r(t),r.d(t,"_frontmatter",(function(){return c})),r.d(t,"default",(function(){return p}));var n=r("IKa1"),a=r("Yh9w"),o=(r("r0ML"),r("V0Ug")),i=r("sN0p");r("xH0s");const s=["components"],c={};void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!Object.prototype.hasOwnProperty.call(c,"__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/resource-controllers.mdx"}});const l={_frontmatter:c},b=i.a;function p(e){let{components:t}=e,r=Object(a.a)(e,s);return Object(o.b)(b,Object(n.a)({},l,r,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"resource-controllers"},"Resource Controllers"),Object(o.b)("p",null,"The resource controller is an extension of the CMS's ",Object(o.b)("inlineCode",{parentName:"p"},"BaseController"),". The ResourceController provides six additional methods to BaseController that supports basic CRUD operations for a resource. These methods are:"),Object(o.b)("h2",{id:"resource-crud-operations-and-their-routes"},"Resource CRUD Operations and their routes"),Object(o.b)("h3",{id:"index"},"index()"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"Route: GET  /"),Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("inlineCode",{parentName:"p"},"View: index.ejs"),Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("inlineCode",{parentName:"p"},"Base Service Method: paginate()"),Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("inlineCode",{parentName:"p"},"Description: "),"Renders the ",Object(o.b)("inlineCode",{parentName:"p"},"index.ejs")," view file in the viewPath. Also fetches a paginated list of the current resource from the database and sends it with the response."),Object(o.b)("h3",{id:"create"},"create()"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"Route: GET /create"),Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("inlineCode",{parentName:"p"},"View: create.ejs"),Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("inlineCode",{parentName:"p"},"Base Service Method: None"),Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("inlineCode",{parentName:"p"},"Description: "),"Renders the ",Object(o.b)("inlineCode",{parentName:"p"},"create.ejs")," view file in the viewPath for rendering the create form for the resource."),Object(o.b)("h3",{id:"add"},"add()"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"Route: POST /"),Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("inlineCode",{parentName:"p"},"Base Service Method: create()"),Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("inlineCode",{parentName:"p"},"Description: "),"This handler handles a POST request and creates a new resource."),Object(o.b)("h3",{id:"edit"},"edit()"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"Route: GET /:id"),Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("inlineCode",{parentName:"p"},"View: edit.ejs"),Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("inlineCode",{parentName:"p"},"Base Service Method: findOne()"),Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("inlineCode",{parentName:"p"},"Description: "),"Renders the ",Object(o.b)("inlineCode",{parentName:"p"},"edit.ejs")," view file in the viewRoute for rendering the edit form for the resource. Also fetches the resource matching the current id (in request parameters) and sends it with the response."),Object(o.b)("h3",{id:"update"},"update()"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"Route: PUT /:id"),Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("inlineCode",{parentName:"p"},"Base Service Method: update()"),Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("inlineCode",{parentName:"p"},"Description: "),"This handler handles a PUT request and updates the resource matching the current id (in request parameters) of the resouce."),Object(o.b)("h3",{id:"delete"},"delete()"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"Route: DELETE /:id"),Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("inlineCode",{parentName:"p"},"Base Service Method: delete()"),Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("inlineCode",{parentName:"p"},"Description: "),"This handler handles a DELTE request and deletes the resource matching the current id (in request paramteres)"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"NOTE: All the above routes are prefixed with the base path set on the Controller.")),Object(o.b)("h2",{id:"creating-resource-controllers-and-factory"},"Creating Resource Controllers and Factory"),Object(o.b)("p",null,"To extend the ResourceController, texpress provides a higer order factory function for generating resource controller for the given resource. The ResourceControllerFactory function generates a class definition for a controller that will handle CRUD operations for a given resource.\nThe factory function takes an options object with the following properties:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"resource: a string representing the name of the resource."),Object(o.b)("li",{parentName:"ul"},"findRelations: an optional array of strings representing the relations to be included in the query results."),Object(o.b)("li",{parentName:"ul"},"validators: an optional object with two properties: create and update, each containing an array of validators for their respective operations.")),Object(o.b)("p",null,"ResourceControllerFactory also requires two generic type parameters that allows the ResourceController to be used with different types of resources and services, making it a versatile and reusable function."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"The Model type parameter specifies the type of the entity model that the Service will operate on."),Object(o.b)("li",{parentName:"ul"},"The Service type parameter specifies the service that provides CRUD operations for the specified entity model.")),Object(o.b)("p",null,"By using generics, the ResourceControllerFactory can generate a ResourceController that works with any type of entity model and service, without requiring any modifications to the code."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},"\n@Controller('/users')\nexport class UserController extends ResourceControllerFactory<UserEntity, UserService>({\n    resource: 'users',\n    findRelations: ['role'],\n    validators: {\n        create: [CreateUserValidator],\n        update: [UpdateUserValidator],\n    },\n}) {\n    _title = 'Users';\n    _viewPath = 'users';\n\n    constructor(\n        public readonly service: UserService\n    ) {\n        super(service);\n    }\n}\n\n")),Object(o.b)("p",null,"With above example, an UserController is craeted with a set of CRUD routes that work out of the box."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"GET /users")," (Renders ",Object(o.b)("inlineCode",{parentName:"li"},"views/users/index.ejs"),")"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"GET /users/create")," (Renders ",Object(o.b)("inlineCode",{parentName:"li"},"views/users/index.create.ejs"),")"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"POST /users")," (Creates the user resource in database)"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"GET /users/:id")," (Renders ",Object(o.b)("inlineCode",{parentName:"li"},"views/users/index.create.ejs"),")"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"PUT /users/:id")," (Updates the user resource matching the paramter ",Object(o.b)("inlineCode",{parentName:"li"},"id"),")"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"DELETE /users/:id")," (Deletes the user resource matching the paramter ",Object(o.b)("inlineCode",{parentName:"li"},"id"),")")),Object(o.b)("h2",{id:"overriding-methods"},"Overriding Methods"),Object(o.b)("p",null,"Sometimes, you may want to override some of the route handlers to add extra custom logic. To do this, simply override the respective method."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},"\n@Controller('/users')\n@CanAccess\nexport class UserController extends ResourceControllerFactory<\n    UserEntity,\n    UserService\n>({\n    resource: 'users',\n    findRelations: ['role'],\n    validators: {\n        create: [CreateUserValidator],\n        update: [UpdateUserValidator],\n    },\n}) {\n    _title = 'Users';\n    _viewPath = 'users';\n\n    constructor(\n        public readonly service: UserService,\n        public readonly publisher: Publisher\n    ) {\n        super(service, publisher);\n    }\n\n    // overriding the create method\n    async create(req: Request, res: Response) {\n        this.page = 'create';\n        // some custom extra logic\n        return this.render(res);\n    }\n}\n\n")),Object(o.b)("p",null,"Note that the @Route() decorator are not applied since they have already been configured in the ResourceController. You only need to override the handler as needed."))}void 0!==p&&p&&p===Object(p)&&Object.isExtensible(p)&&!Object.prototype.hasOwnProperty.call(p,"__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/resource-controllers.mdx"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-resource-controllers-mdx-de57fa09932a57ddd88c.js.map