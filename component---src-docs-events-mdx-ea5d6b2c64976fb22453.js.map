{"version":3,"sources":["webpack:///../src/docs/events.mdx"],"names":["_frontmatter","Object","isExtensible","prototype","hasOwnProperty","call","defineProperty","configurable","value","name","filename","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"mappings":"2RAMaA,EAAe,QAAG,IAAAA,UAAAC,OAAAD,IAAAC,OAAAC,aAAAF,KAAAC,OAAAE,UAAAC,eAAAC,KAAAL,EAAA,eAAAC,OAAAK,eAAAN,EAAA,cAAAO,cAAA,EAAAC,MAAA,CAAAC,KAAA,eAAAC,SAAA,yBAC/B,MAAMC,EAAc,CAClBX,gBAEIY,EAAYC,IACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIE,EAAKC,YAAAH,EAAAI,GAER,OAAOC,YAACR,EAASS,YAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,cAG5EF,YAAA,MACE,GAAM,UAAQ,UAEhBA,YAAA,kQACAA,YAAA,MACE,GAAM,wBAAsB,wBAE9BA,YAAA,kPACAA,YAAA,WAAKA,YAAA,QAAMG,WAAW,MAClB,UAAa,uBAAqB,uHAMtCH,YAAA,wPACAA,YAAA,MACE,GAAM,kBAAgB,kBAExBA,YAAA,mFAA8EA,YAAA,cAAYG,WAAW,KAAG,cAA4B,0LACpIH,YAAA,WAAKA,YAAA,QAAMG,WAAW,MAClB,UAAa,uBAAqB,mjBAqBtCH,YAAA,MACE,GAAM,mBAAiB,mBAEzBA,YAAA,wGACAA,YAAA,WAAKA,YAAA,QAAMG,WAAW,MAClB,UAAa,uBAAqB,+VAezC,IAAAT,UAAAb,OAAAa,IAAAb,OAAAC,aAAAY,KAAAb,OAAAE,UAAAC,eAAAC,KAAAS,EAAA,eAAAb,OAAAK,eAAAQ,EAAA,cAAAP,cAAA,EAAAC,MAAA,CAAAC,KAAA,aAAAC,SAAA,yBAEDI,EAAWU,gBAAiB","file":"component---src-docs-events-mdx-ea5d6b2c64976fb22453.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"C:/Users/Sonish Maharjan/Desktop/texpress/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"events\"\n    }}>{`Events`}</h1>\n    <p>{`Texpress provides a BaseEvent class that extends the built-in EventEmitter class from the Node.js standard library. It provides a base implementation for creating custom event classes that can emit and handle events with strongly typed payloads.`}</p>\n    <h2 {...{\n      \"id\": \"creating-event-types\"\n    }}>{`Creating Event Types`}</h2>\n    <p>{`Before creating events, you need to define a type for the events it can emit and handle. This type should be a TypeScript interface with keys for each event name and values for an array of payload type of each event. For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`export interface MyEventTypes {\n    'event-a': [string, number];\n    'event-b': [{ foo: string }, boolean];\n}\n`}</code></pre>\n    <p>{`This interface defines two events: 'event-a' and 'event-b'. The payload type for 'event-a' is a tuple with a string and a number, while the payload type for 'event-b' is an object with a foo property of type string and a boolean value.`}</p>\n    <h2 {...{\n      \"id\": \"creating-event\"\n    }}>{`Creating Event`}</h2>\n    <p>{`Next, you can create a class that extend the BaseEvent by passing your `}<inlineCode parentName=\"p\">{`EventTypes`}</inlineCode>{` as generic type. The BaseEvent class provides methods for emitting and handling these events. In the constructor, you only need to register the handlers for each of the event types.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class MyEvent extends BaseEvent<MyEventTypes> {\n    eventAHandler(...payload: MyEventTypes['event-a']) {\n        // logic with Event A's payload which is\n        // payload[0] string\n        // payload[1] number\n    }\n\n    eventBHandler(...payload: MyEventTypes['event-b']) {\n        // logic with Event B's payload which is\n        // payload[0] {foo: string}\n        // payload[1] boolean\n    }\n\n    constructor() {\n        super();\n        this.on('event-a', this.eventAHandler);\n        this.on('event-b', this.eventBHandler);\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"emitting-events\"\n    }}>{`Emitting Events`}</h2>\n    <p>{`Once the custom event has been created, you can use this class to emit events. For example,`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class MyService {\n    constructor(\n        myEvent: MyEvent // using typedi dependency injection to inject MyEvent instance\n    ) {}\n\n    doSomethingAndEmitEvent() {\n        // some logic goes here\n        this.myEvent.emit('event-a', 'some string', 15);\n        this.myEvent.emit('event-b', { foo: 'some val' }, false);\n    }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}