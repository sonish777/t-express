{"version":3,"sources":["webpack:///../src/docs/base-controllers.mdx"],"names":["_frontmatter","Object","isExtensible","prototype","hasOwnProperty","call","defineProperty","configurable","value","name","filename","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"mappings":"wRAMaA,EAAe,QAAG,IAAAA,UAAAC,OAAAD,IAAAC,OAAAC,aAAAF,KAAAC,OAAAE,UAAAC,eAAAC,KAAAL,EAAA,eAAAC,OAAAK,eAAAN,EAAA,cAAAO,cAAA,EAAAC,MAAA,CAAAC,KAAA,eAAAC,SAAA,mCAC/B,MAAMC,EAAc,CAClBX,gBAEIY,EAAYC,IACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIE,EAAKC,YAAAH,EAAAI,GAER,OAAOC,YAACR,EAASS,YAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,cAG5EF,YAAA,MACE,GAAM,oBAAkB,oBAE1BA,YAAA,mMAA8LA,YAAA,cAAYG,WAAW,KAAG,kBAAgC,WAAYH,YAAA,cAAYG,WAAW,KAAG,qBAAmC,KACjUH,YAAA,MACE,GAAM,kBAAgB,kBAExBA,YAAA,qKACAA,YAAA,UACEA,YAAA,MAAIG,WAAW,MACbH,YAAA,KAAGG,WAAW,MAAI,eAClBH,YAAA,MAAIG,WAAW,MACbH,YAAA,MAAIG,WAAW,MAAI,+CACnBH,YAAA,MAAIG,WAAW,MAAI,wFACnBH,YAAA,MAAIG,WAAW,MAAI,gDACnBH,YAAA,MAAIG,WAAW,MAAI,8CAGvBH,YAAA,MAAIG,WAAW,MACbH,YAAA,KAAGG,WAAW,MAAI,WAClBH,YAAA,MAAIG,WAAW,MACbH,YAAA,MAAIG,WAAW,MAAI,6HAA+HH,YAAA,cAAYG,WAAW,MAAI,OAAqB,QAASH,YAAA,cAAYG,WAAW,MAAI,QAAsB,KAC5PH,YAAA,MAAIG,WAAW,MAAI,sLAIzBH,YAAA,WAAKA,YAAA,QAAMG,WAAW,MAClB,UAAa,uBAAqB,6cAsBtCH,YAAA,mIAA8HA,YAAA,cAAYG,WAAW,KAAG,UAAwB,4DAA6DH,YAAA,cAAYG,WAAW,KAAG,kCAAgD,KACvTH,YAAA,kBACEA,YAAA,KAAGG,WAAW,cAAY,qBAAuBH,YAAA,UAAQG,WAAW,KAAG,0BAEzEH,YAAA,MACE,GAAM,qBAAmB,qBAE3BA,YAAA,+LACAA,YAAA,UACEA,YAAA,MAAIG,WAAW,MAAI,mCACnBH,YAAA,MAAIG,WAAW,MAAI,4CACnBH,YAAA,MAAIG,WAAW,MAAI,+CACnBH,YAAA,MAAIG,WAAW,MAAI,iDACnBH,YAAA,MAAIG,WAAW,MAAI,gEAErBH,YAAA,WAAKA,YAAA,QAAMG,WAAW,MAClB,UAAa,uBAAqB,wTAUtCH,YAAA,mCAA8BA,YAAA,cAAYG,WAAW,KAAG,UAAwB,iGAGnF,IAAAT,UAAAb,OAAAa,IAAAb,OAAAC,aAAAY,KAAAb,OAAAE,UAAAC,eAAAC,KAAAS,EAAA,eAAAb,OAAAK,eAAAQ,EAAA,cAAAP,cAAA,EAAAC,MAAA,CAAAC,KAAA,aAAAC,SAAA,mCAEDI,EAAWU,gBAAiB","file":"component---src-docs-base-controllers-mdx-caf418fdb1b043376e99.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"C:/Users/Sonish Maharjan/Desktop/texpress/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"base-controllers\"\n    }}>{`Base Controllers`}</h1>\n    <p>{`Texpress comes with built-in abstract base controllers that already consists of some common methods needed for a route handler. There are two base controllers that can be extended, a `}<inlineCode parentName=\"p\">{`BaseController`}</inlineCode>{` and an `}<inlineCode parentName=\"p\">{`ApiBaseController`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"basecontroller\"\n    }}>{`BaseController`}</h2>\n    <p>{`This base controller is to be extended for CMS controllers. It consists of properties and methods that could be shared for all kinds of cms controllers.`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Properties:`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`baseView: The name of the base layout view.`}</li>\n          <li parentName=\"ul\">{`viewPath: The name of the directory that contains the view for the current resource.`}</li>\n          <li parentName=\"ul\">{`title: The title of the page being rendered.`}</li>\n          <li parentName=\"ul\">{`page: The name of the current page view.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Methods`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`setBreadcrumbs(): This method is used to set the breadcrumb for the current page. A breadcrumb object has two properties, `}<inlineCode parentName=\"li\">{`url`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`name`}</inlineCode>{`.`}</li>\n          <li parentName=\"ul\">{`render(): This method is used to render the view. The first argument is the res object of Express, and the second argument is n Object that needs to be passed to the response.`}</li>\n        </ul>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\nexport class AuthController extends BaseController {\n    protected _baseView = 'base-login';\n    _title = 'Auth';\n    _viewPath = 'auth';\n    _module = 'auth';\n\n    @Route({\n        path: '/login',\n        method: HTTPMethods.Get,\n    })\n    async loginView(req: Request, res: Response) {\n        this.page = 'login';\n        this.setBreadcrumbs([\n            { name: 'Login', url: '#' }\n        ]);\n        this.render(res);\n    }\n}\n\n`}</code></pre>\n    <p>{`In above example, AuthController extends the BaseController and sets the common properties for it as required. For the `}<inlineCode parentName=\"p\">{`/login`}</inlineCode>{` route, the view is rendered from the path combined from `}<inlineCode parentName=\"p\">{`views_directory/_viewPath/page`}</inlineCode>{`.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Renders view from `}<strong parentName=\"p\">{`views/auth/login.ejs`}</strong></p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"apibasecontroller\"\n    }}>{`ApiBaseController`}</h2>\n    <p>{`Similar to BaseController but for APIs. This base controller consists of methods that can be shared between the different controllers for APIs. It includes the following methods:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`ok(): Sends an 200 Ok response.`}</li>\n      <li parentName=\"ul\">{`created(): Sends a 201 Created response.`}</li>\n      <li parentName=\"ul\">{`deleted(): Sends a 204 No Content response.`}</li>\n      <li parentName=\"ul\">{`send(): Sends a payload with 200 Ok response.`}</li>\n      <li parentName=\"ul\">{`paginate(): Sends a paginated payload with 200 Ok response.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`@ApiController('/users')\nexport class ApiUserController extends APIBaseController {\n    @Route({ method: HTTPMethods.Get, path: '/:id' })\n    findUserByEmail(req: Request, res: Response) {\n        const data = getUserByEmail('test@test.com'); //get user\n        return this.send(res, data);\n    }\n}\n`}</code></pre>\n    <p>{`Above example uses the `}<inlineCode parentName=\"p\">{`send()`}</inlineCode>{` method from the base controller to send the user entity as a response with 200 status.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}