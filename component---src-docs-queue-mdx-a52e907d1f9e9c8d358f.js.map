{"version":3,"sources":["webpack:///../src/docs/queue.mdx"],"names":["_frontmatter","Object","isExtensible","prototype","hasOwnProperty","call","defineProperty","configurable","value","name","filename","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"mappings":"yRAMaA,EAAe,QAAG,IAAAA,UAAAC,OAAAD,IAAAC,OAAAC,aAAAF,KAAAC,OAAAE,UAAAC,eAAAC,KAAAL,EAAA,eAAAC,OAAAK,eAAAN,EAAA,cAAAO,cAAA,EAAAC,MAAA,CAAAC,KAAA,eAAAC,SAAA,wBAC/B,MAAMC,EAAc,CAClBX,gBAEIY,EAAYC,IACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIE,EAAKC,YAAAH,EAAAI,GAER,OAAOC,YAACR,EAASS,YAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,cAG5EF,YAAA,MACE,GAAM,UAAQ,UAEhBA,YAAA,kRAA6QA,YAAA,cAAYG,WAAW,KAAG,aAA2B,UAAWH,YAAA,cAAYG,WAAW,KAAG,YAA0B,OACjYH,YAAA,sBAAiBA,YAAA,cAAYG,WAAW,KAAG,aAA2B,+EAAgFH,YAAA,cAAYG,WAAW,KAAG,YAA0B,kJAC5MH,YAAA,cAAYG,WAAW,KAAG,iCAA+C,gFAG1E,IAAAT,UAAAb,OAAAa,IAAAb,OAAAC,aAAAY,KAAAb,OAAAE,UAAAC,eAAAC,KAAAS,EAAA,eAAAb,OAAAK,eAAAQ,EAAA,cAAAP,cAAA,EAAAC,MAAA,CAAAC,KAAA,aAAAC,SAAA,wBAEDI,EAAWU,gBAAiB","file":"component---src-docs-queue-mdx-a52e907d1f9e9c8d358f.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"C:/Users/Sonish Maharjan/Desktop/texpress/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"queues\"\n    }}>{`Queues`}</h1>\n    <p>{`Texpress uses RabbitMQ under the hood to manage queues and message passing. RabbitMQService comes as a seprate shared package in texpress. The service is responsible for handling connections to the RabbitMQ server. There are two parts to the RabbitMQ Service, a `}<inlineCode parentName=\"p\">{`Publisher`}</inlineCode>{` and a `}<inlineCode parentName=\"p\">{`Consumer`}</inlineCode>{`.  `}</p>\n    <p>{`While the `}<inlineCode parentName=\"p\">{`Publisher`}</inlineCode>{` is just an injectable service that you can inject to publish messages. The `}<inlineCode parentName=\"p\">{`Consumer`}</inlineCode>{` is a separate application that serves independently. Once you serve your consumer application, you can check its status by going to the URL:\n`}<inlineCode parentName=\"p\">{`http://localhost:9999/healthz`}</inlineCode>{`. You may replace the PORT with the one you've set in the config file.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}