{"version":3,"sources":["webpack:///../src/docs/controller-error-handling.mdx"],"names":["_frontmatter","Object","isExtensible","prototype","hasOwnProperty","call","defineProperty","configurable","value","name","filename","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"mappings":"wRAMaA,EAAe,QAAG,IAAAA,UAAAC,OAAAD,IAAAC,OAAAC,aAAAF,KAAAC,OAAAE,UAAAC,eAAAC,KAAAL,EAAA,eAAAC,OAAAK,eAAAN,EAAA,cAAAO,cAAA,EAAAC,MAAA,CAAAC,KAAA,eAAAC,SAAA,4CAC/B,MAAMC,EAAc,CAClBX,gBAEIY,EAAYC,IACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIE,EAAKC,YAAAH,EAAAI,GAER,OAAOC,YAACR,EAASS,YAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,cAG5EF,YAAA,MACE,GAAM,gCAA8B,gCAEtCA,YAAA,4DAAuDA,YAAA,cAAYG,WAAW,KAAG,aAA2B,4BAA6BH,YAAA,cAAYG,WAAW,KAAG,eAA6B,8OAChMH,YAAA,MACE,GAAM,kCAAgC,kCAExCA,YAAA,WAAKA,YAAA,QAAMG,WAAW,MAClB,UAAa,uBAAqB,iZAmBtCH,YAAA,MACE,GAAM,iCAA+B,iCAEvCA,YAAA,gHACAA,YAAA,UACEA,YAAA,MAAIG,WAAW,MAAKH,YAAA,cAAYG,WAAW,MAAI,cAA4B,cAAeH,YAAA,cAAYG,WAAW,MAAI,MAAoB,kBAAmBH,YAAA,cAAYG,WAAW,MAAI,OAAqB,wBAC5MH,YAAA,MAAIG,WAAW,MAAKH,YAAA,cAAYG,WAAW,MAAI,mBAAiC,cAAeH,YAAA,cAAYG,WAAW,MAAI,WAAyB,kBAAmBH,YAAA,cAAYG,WAAW,MAAI,OAAqB,gCAAiCH,YAAA,cAAYG,WAAW,MAAI,QAAsB,oEACxSH,YAAA,MAAIG,WAAW,MAAKH,YAAA,cAAYG,WAAW,MAAI,mBAAiC,aAAcH,YAAA,cAAYG,WAAW,MAAI,cAA4B,kBAAmBH,YAAA,cAAYG,WAAW,MAAI,OAAqB,sBACxNH,YAAA,MAAIG,WAAW,MAAKH,YAAA,cAAYG,WAAW,MAAI,gBAA8B,kEAAmEH,YAAA,cAAYG,WAAW,MAAI,OAAqB,sBAChMH,YAAA,MAAIG,WAAW,MAAKH,YAAA,cAAYG,WAAW,MAAI,qBAAmC,8GAA+GH,YAAA,cAAYG,WAAW,MAAI,OAAqB,uBAEnPH,YAAA,uGAAkGA,YAAA,cAAYG,WAAW,KAAG,eAA6B,uEAAwEH,YAAA,cAAYG,WAAW,KAAG,eAA6B,4CACxRH,YAAA,WAAKA,YAAA,QAAMG,WAAW,MAClB,UAAa,uBAAqB,+jBAsBzC,IAAAT,UAAAb,OAAAa,IAAAb,OAAAC,aAAAY,KAAAb,OAAAE,UAAAC,eAAAC,KAAAS,EAAA,eAAAb,OAAAK,eAAAQ,EAAA,cAAAP,cAAA,EAAAC,MAAA,CAAAC,KAAA,aAAAC,SAAA,4CAEDI,EAAWU,gBAAiB","file":"component---src-docs-controller-error-handling-mdx-784469ebac7c2e74a0ec.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"C:/Users/Sonish Maharjan/Desktop/texpress/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"error-handing-in-controllers\"\n    }}>{`Error Handing in Controllers`}</h1>\n    <p>{`Instead of wrapping all route handler code with `}<inlineCode parentName=\"p\">{`try catch`}</inlineCode>{` blocks, you can use the `}<inlineCode parentName=\"p\">{`@CatchAsync`}</inlineCode>{` method decorator. This decorator catches any exceptions occured and passes it to the exception handlers list we discussed in the Exception Handlers section. From there, the responsible exception handler among the list will handle it.`}</p>\n    <h2 {...{\n      \"id\": \"using-the-catchasync-decorator\"\n    }}>{`Using the CatchAsync Decorator`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`\nimport { Controller, Route } from 'core/controllers';\nimport { CatchAsync } from 'core/exceptions';\n\n@Controller('/my-resource')\nclass MyResourceController {\n\n    @Route({\n        path: '/',\n        method: HTTPMethods.Post,\n    })\n    @CatchAsync // Handles any exceptions occured\n    async resetPassword(req: Request, res: Response) {\n        // create resource here\n    }\n}\n\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"using-api-response-decorators\"\n    }}>{`Using API Response Decorators`}</h2>\n    <p>{`In API controllers, you may use one of the following decorators to respond to the incoding request,`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`@RespondOK`}</inlineCode>{`: Sends an `}<inlineCode parentName=\"li\">{`OK`}</inlineCode>{` response with `}<inlineCode parentName=\"li\">{`200`}</inlineCode>{` HTTP status code.  `}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`@RespondCreated`}</inlineCode>{`: Sends an `}<inlineCode parentName=\"li\">{`Created`}</inlineCode>{` response with `}<inlineCode parentName=\"li\">{`201`}</inlineCode>{` HTTP status code. If passed `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{` as the first argument, the newly created resource will be sent.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`@RespondDeleted`}</inlineCode>{`: Sends a `}<inlineCode parentName=\"li\">{`No Content`}</inlineCode>{` response with `}<inlineCode parentName=\"li\">{`204`}</inlineCode>{` HTTP status code.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`@RespondItem`}</inlineCode>{`: Sends the returned value of the decorated route handler with `}<inlineCode parentName=\"li\">{`200`}</inlineCode>{` HTTP status code.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`@RespondPaginated`}</inlineCode>{`: Sends the returned paginated response of the decorated route handler along with pagination metadata with `}<inlineCode parentName=\"li\">{`200`}</inlineCode>{` HTTP status code.`}</li>\n    </ul>\n    <p>{`If you are using any of these decorators to send API responses, you do not need to add the `}<inlineCode parentName=\"p\">{`@CatchAsync`}</inlineCode>{` decorator, as these decorators also perform the same action as the `}<inlineCode parentName=\"p\">{`@CatchAsync`}</inlineCode>{` decorator in case any exception occurs.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`\nimport { Route, ApiController } from 'core/controllers';\nimport { RespondCreated } from 'core/utils';\n\n@ApiController('/my-resource')\nexport class ApiAuthController extends APIBaseController {\n\n    @Route({\n        method: HTTPMethods.Post,\n        path: '/',\n    })\n    @RespondCreated(true) // returns the newly created response since true is passed as the first parameter\n                          // Also handles any exceptions that occur  \n    createMyResource(req: Request, res: Response) {\n        // return the created resource\n    }\n}\n\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}