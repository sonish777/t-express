{"version":3,"sources":["webpack:///../src/docs/base-services.mdx"],"names":["_frontmatter","Object","isExtensible","prototype","hasOwnProperty","call","defineProperty","configurable","value","name","filename","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"mappings":"wRAMaA,EAAe,QAAG,IAAAA,UAAAC,OAAAD,IAAAC,OAAAC,aAAAF,KAAAC,OAAAE,UAAAC,eAAAC,KAAAL,EAAA,eAAAC,OAAAK,eAAAN,EAAA,cAAAO,cAAA,EAAAC,MAAA,CAAAC,KAAA,eAAAC,SAAA,gCAC/B,MAAMC,EAAc,CAClBX,gBAEIY,EAAYC,IACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIE,EAAKC,YAAAH,EAAAI,GAER,OAAOC,YAACR,EAASS,YAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,cAG5EF,YAAA,MACE,GAAM,iBAAe,iBAEvBA,YAAA,kZACAA,YAAA,MACE,GAAM,cAAY,cAEpBA,YAAA,UACEA,YAAA,MAAIG,WAAW,MAAI,yIACnBH,YAAA,MAAIG,WAAW,MAAI,0KACnBH,YAAA,MAAIG,WAAW,MAAI,0IAErBH,YAAA,MACE,GAAM,WAAS,WAEjBA,YAAA,UACEA,YAAA,MAAIG,WAAW,MAAI,uHACnBH,YAAA,MAAIG,WAAW,MAAI,yOACnBH,YAAA,MAAIG,WAAW,MAAI,gLACnBH,YAAA,MAAIG,WAAW,MAAI,0DAA4DH,YAAA,cAAYG,WAAW,MAAI,kBAAgC,+GAC1IH,YAAA,MAAIG,WAAW,MAAI,4FAA8FH,YAAA,cAAYG,WAAW,MAAI,kBAAgC,kFAC5KH,YAAA,MAAIG,WAAW,MAAI,wHACnBH,YAAA,MAAIG,WAAW,MAAI,oTACnBH,YAAA,MAAIG,WAAW,MAAI,8IAErBH,YAAA,MACE,GAAM,yBAAuB,yBAE/BA,YAAA,WAAKA,YAAA,QAAMG,WAAW,MAClB,UAAa,uBAAqB,mVAatCH,YAAA,+IAGH,IAAAN,UAAAb,OAAAa,IAAAb,OAAAC,aAAAY,KAAAb,OAAAE,UAAAC,eAAAC,KAAAS,EAAA,eAAAb,OAAAK,eAAAQ,EAAA,cAAAP,cAAA,EAAAC,MAAA,CAAAC,KAAA,aAAAC,SAAA,gCAEDI,EAAWU,gBAAiB","file":"component---src-docs-base-services-mdx-c3c6c965ab4ceb197721.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"C:/Users/Sonish Maharjan/Desktop/texpress/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"base-services\"\n    }}>{`Base Services`}</h1>\n    <p>{`The BaseService class is an abstract class that serves as a base for creating services for different resources. It provides a set of common CRUD methods that can be used for interacting with the resource's data. The class is a generic class, and it takes a type parameter K that extends the BaseEntity class. This allows the class to work with any entity that extends the BaseEntity class.`}</p>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`repository: A protected abstract property that must be implemented in derived classes. It represents the repository for the resource.`}</li>\n      <li parentName=\"ul\">{`filterColumns: A protected readonly property that is an array of column names that can be used for filtering data. This property can be overridden in derived classes.`}</li>\n      <li parentName=\"ul\">{`resource: A protected readonly property that represents the name of the resource. This property can be overridden in derived classes.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"methods\"\n    }}>{`Methods`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`findAll(): This method returns a promise that resolves to an array of all the entities of type K in the repository.`}</li>\n      <li parentName=\"ul\">{`findOrFail(): This method takes a where argument and an optional relations argument. It returns a promise that resolves to an entity of type K that matches the where argument. If no entity is found, a NotFoundException is thrown.`}</li>\n      <li parentName=\"ul\">{`findOne(): This method takes a where argument and an optional relations argument. It returns a promise that resolves to an entity of type K that matches the where argument.`}</li>\n      <li parentName=\"ul\">{`create(): This method takes a payload argument of type `}<inlineCode parentName=\"li\">{`DeepPartial<K>`}</inlineCode>{`. It creates a new entity of type K using the create method of the repository and saves it to the database.`}</li>\n      <li parentName=\"ul\">{`update(): This method takes an id argument of type number and a payload argument of type `}<inlineCode parentName=\"li\">{`DeepPartial<K>`}</inlineCode>{`. It retrieves the entity with the given id and saves updates to the database.`}</li>\n      <li parentName=\"ul\">{`delete(): This method takes an id argument of type number. It deletes the enitity matching the id from the database.`}</li>\n      <li parentName=\"ul\">{`paginate(): This method takes an optional query argument of type CommonSearchQuery and an optional relations argument of type string[]. It paginates the entities of type K in the repository based on the query argument and returns a PaginationResponse object that contains the paginated data and metadata.`}</li>\n      <li parentName=\"ul\">{`serialize(): Serializes the given model to the specified serializeToClass. The method returns the serialized instance of the given class.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"using-the-baseservice\"\n    }}>{`Using the BaseService`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\nimport { Service } from 'typedi';\n\n@Service()\nexport class UserService extends BaseService<UserEntity> {\n    @GetRepository(UserEntity)\n    protected readonly repository: Repository<UserEntity>;\n    protected readonly filterColumns = ['firstName', 'lastName']; // filters are applied on firstName and lastName columns\n\n}\n\n`}</code></pre>\n    <p>{`By injecting the UserService, you can make use of the built in methods for basic CRUD operations on the UserEntity relation.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}