{"version":3,"sources":["webpack:///../src/docs/validators.mdx"],"names":["_frontmatter","Object","isExtensible","prototype","hasOwnProperty","call","defineProperty","configurable","value","name","filename","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-docs-validators-mdx-276a01baf4bc93c8657b.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"C:/Users/Sonish Maharjan/Desktop/texpress/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"validators\"\n    }}>{`Validators`}</h1>\n    <p>{`Texpress uses express-validator to validate incoming requests. Validators are created by implementing the ValidatorWithStaticProps generic type, that takes the type of current ValidatorClass as the type argument. To add validation rules, define a `}<inlineCode parentName=\"p\">{`getter`}</inlineCode>{` for `}<inlineCode parentName=\"p\">{`static`}</inlineCode>{` property named `}<inlineCode parentName=\"p\">{`rules`}</inlineCode>{` in the class. The rules are basically Objects with name of the fields to validate as `}<inlineCode parentName=\"p\">{`keys`}</inlineCode>{` and express validation chain as `}<inlineCode parentName=\"p\">{`values`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"creating-a-validator\"\n    }}>{`Creating a Validator`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\nclass CreateRoleValidator\n    implements ValidatorWithStaticProps<typeof CreateRoleValidator>\n{\n    static get rules(): Record<string, ValidationChain> {\n        return {\n            name: // Some rules for name field\n            slug: // Some rules for slug field\n        };\n    }\n}\n\n/* Use these validators by passing these Validators in the validators array whilst registering routes */\n\n@Controller('/roles')\nclass RoleController {\n\n    @Route({\n        path: '/',\n        method: HttpMethods.Post,\n        validators: [CreateRoleValidator] // Pass validators here\n    })\n    create() {\n\n    }\n\n}\n\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"defining-rules-using-validationbuilder\"\n    }}>{`Defining Rules using ValidationBuilder`}</h2>\n    <p>{`ValidationBuilder from core package can be used to easily define validation rules. ValidationBuilder is a utility class that provides static methods to chain multiple validation rules. ValidationBuilder uses express-validator under the hood to construct the validation chain.`}<br parentName=\"p\"></br>{`\n`}<strong parentName=\"p\">{`Using ValidationBuilder gives you advantage of customizing and re-using already created Validators.`}</strong></p>\n    <h3 {...{\n      \"id\": \"chaining-rules\"\n    }}>{`Chaining Rules`}</h3>\n    <p>{`To define rules for a field, start chaining the methods followed by the `}<inlineCode parentName=\"p\">{`ForField()`}</inlineCode>{` staic method. After chaining the methods, chain the `}<inlineCode parentName=\"p\">{`build()`}</inlineCode>{` method at the end to build the validation chain.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class CreateRoleValidator\n    implements ValidatorWithStaticProps<typeof CreateRoleValidator>\n{\n    static get rules(): Record<string, ValidationChain> {\n        return {\n            name: ValidationBuilder.ForField('name')\n                .Required()\n                .MinCharacters(5)\n                .build(),\n        };\n    }\n}\n`}</code></pre>\n    <p>{`Each validation rule takes an optional `}<inlineCode parentName=\"p\">{`ValidationOptions`}</inlineCode>{` argument that has a 'fieldDisplayName' and 'message' optional properties.`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`fieldDisplayName`}<br parentName=\"p\"></br>{`\n`}<inlineCode parentName=\"p\">{`fieldDisplayName`}</inlineCode>{` is used to replace the field's name in the validation message.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`message`}{`_`}{`_`}{`\n`}<inlineCode parentName=\"p\">{`message`}</inlineCode>{` is used to pass a custom validation message.`}</p>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\nclass CreateRoleValidator\n    implements ValidatorWithStaticProps<typeof CreateRoleValidator>\n{\n    static get rules(): Record<string, ValidationChain> {\n        return {\n            name: ValidationBuilder\n                    .ForField('name')\n                    .Required({\n                        message: \"Name is required\"\n                    })\n                    .build()\n            slug: ValidationBuilder\n                    .ForField('slug')\n                    .Required({ fieldDisplayName: 'Slugged Text'})\n                    .build()\n        };\n    }\n}\n\n`}</code></pre>\n    <p>{`In above example, the name field uses a custom validation message: `}<inlineCode parentName=\"p\">{`Name is required`}</inlineCode>{` . In case of slug, the validation is formed by replacing the `}<inlineCode parentName=\"p\">{`fieldDisplayName`}</inlineCode>{` in the generic required message. Generic required messages are validation message constants exported from the core package.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`ValidationMessages = {\n    required: '%field% is a required field',\n    // other validation messages\n};\n`}</code></pre>\n    <p>{`These validation messages will be as follows:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`For name field: `}<strong parentName=\"li\">{`Name is required.`}</strong></li>\n      <li parentName=\"ul\">{`For slug field: `}<strong parentName=\"li\">{`Slugged Text is a required field.`}</strong></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"creating-custom-validators\"\n    }}>{`Creating Custom Validators`}</h2>\n    <p>{`Custom validators can be created by implementing the CustomValidator interface imported from the core package. The CustomValidator interface requires a validate method to be implemented. The validate method takes two arguments: the value of the field the validation rule is applied to, and second `}<inlineCode parentName=\"p\">{`Meta`}</inlineCode>{` argument of the express-validator which contains the current request and path metadata.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\nclass UniqueValidator implements CustomValidator {\n    @GetRepository(UserEntity)\n    protected readonly repository: Repository<UserEntity>;\n\n    async validate(value: string, { req, path }: Meta) {\n        // use repository to check if email already exists in the db and throw error if exists.\n    }\n}\n\n`}</code></pre>\n    <p>{`To apply the custom validator, simply use the `}<inlineCode parentName=\"p\">{`Custom`}</inlineCode>{` method from the ValidationBuilder interface.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class CreateRoleValidator\n    implements ValidatorWithStaticProps<typeof CreateRoleValidator>\n{\n    static get rules(): Record<string, ValidationChain> {\n        return {\n            slug: ValidationBuilder.ForField('slug')\n                .Custom(UniqueValidator) // Pass the custom validator here\n                .build(),\n            // ...other validation rules\n        };\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"using-express-validator\"\n    }}>{`Using express-validator`}</h2>\n    <p>{`If for some reason, you wish to stick to using express-validator, simply chain the validation rules from express-validator in the same way we did with the `}<inlineCode parentName=\"p\">{`ValidationBuilder`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { check } from 'express-validator';\n\nclass CreateRoleValidator\n    implements ValidatorWithStaticProps<typeof CreateRoleValidator>\n{\n    static get rules(): Record<string, ValidationChain> {\n        return {\n            name: check('name').notEmpty().withMessage('Name is required'),\n            // ...other validation rules\n        };\n    }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}