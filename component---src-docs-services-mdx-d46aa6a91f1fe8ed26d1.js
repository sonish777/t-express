(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{STkl:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return s})),n.d(t,"default",(function(){return b}));var i=n("IKa1"),r=n("Yh9w"),c=(n("r0ML"),n("V0Ug")),o=n("sN0p");n("xH0s");const a=["components"],s={};void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!Object.prototype.hasOwnProperty.call(s,"__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/services.mdx"}});const l={_frontmatter:s},p=o.a;function b(e){let{components:t}=e,n=Object(r.a)(e,a);return Object(c.b)(p,Object(i.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h1",{id:"services"},"Services"),Object(c.b)("p",null,"Services are typically classes designed to be injected into controllers that provide functionalites to be used across multiple controllers. Services can be used to encapsulate business logic, perform database operations, or manage third-party integrations. By separating this functionality into services, controllers become simpler and more focused on handling incoming requests and generating responses."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-javascript"},"import { Service } from 'typedi';\n\n@Service()\nclass AuthService {}\n")),Object(c.b)("p",null,"Texpress uses ",Object(c.b)("inlineCode",{parentName:"p"},"typedi")," to manage dependency injection. To make a service injectable, decorate it with the ",Object(c.b)("inlineCode",{parentName:"p"},"@Service()")," decorotor imported from ",Object(c.b)("inlineCode",{parentName:"p"},"typedi")," package."),Object(c.b)("h2",{id:"injecting-services"},"Injecting Services"),Object(c.b)("p",null,"Services marked as injectable using ",Object(c.b)("inlineCode",{parentName:"p"},"@Service()")," decorator can be injected in controllers or even other services that need thier functionalites."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-javascript"},"\n@Controller('/auth')\nclass AuthController {\n\n    // AuthService instance is injected to this.authService property\n    constructor(private readonly authService: AuthService) {}\n}\n\n")),Object(c.b)("p",null,"In above example, the type annotation ",Object(c.b)("inlineCode",{parentName:"p"},"AuthService")," is used to inject its instance. This is constructor based way of injecting services. There are other ways to inject services too, please refer to the official documentation of typedi for this."))}void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!Object.prototype.hasOwnProperty.call(b,"__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/services.mdx"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-services-mdx-d46aa6a91f1fe8ed26d1.js.map