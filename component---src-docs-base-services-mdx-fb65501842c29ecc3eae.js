(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{X7Xl:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return c})),a.d(t,"default",(function(){return d}));var r=a("IKa1"),n=a("Yh9w"),s=(a("r0ML"),a("V0Ug")),i=a("sN0p");a("xH0s");const o=["components"],c={};void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!Object.prototype.hasOwnProperty.call(c,"__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/base-services.mdx"}});const l={_frontmatter:c},p=i.a;function d(e){let{components:t}=e,a=Object(n.a)(e,o);return Object(s.b)(p,Object(r.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(s.b)("h1",{id:"base-services"},"Base Services"),Object(s.b)("p",null,"The BaseService class is an abstract class that serves as a base for creating services for different resources. It provides a set of common CRUD methods that can be used for interacting with the resource's data. The class is a generic class, and it takes a type parameter K that extends the BaseEntity class. This allows the class to work with any entity that extends the BaseEntity class."),Object(s.b)("h2",{id:"properties"},"Properties"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"repository: A protected abstract property that must be implemented in derived classes. It represents the repository for the resource."),Object(s.b)("li",{parentName:"ul"},"filterColumns: A protected readonly property that is an array of column names that can be used for filtering data. This property can be overridden in derived classes."),Object(s.b)("li",{parentName:"ul"},"resource: A protected readonly property that represents the name of the resource. This property can be overridden in derived classes.")),Object(s.b)("h2",{id:"methods"},"Methods"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"findAll(): This method returns a promise that resolves to an array of all the entities of type K in the repository."),Object(s.b)("li",{parentName:"ul"},"findOrFail(): This method takes a where argument and an optional relations argument. It returns a promise that resolves to an entity of type K that matches the where argument. If no entity is found, a NotFoundException is thrown."),Object(s.b)("li",{parentName:"ul"},"findOne(): This method takes a where argument and an optional relations argument. It returns a promise that resolves to an entity of type K that matches the where argument."),Object(s.b)("li",{parentName:"ul"},"create(): This method takes a payload argument of type ",Object(s.b)("inlineCode",{parentName:"li"},"DeepPartial<K>"),". It creates a new entity of type K using the create method of the repository and saves it to the database."),Object(s.b)("li",{parentName:"ul"},"update(): This method takes an id argument of type number and a payload argument of type ",Object(s.b)("inlineCode",{parentName:"li"},"DeepPartial<K>"),". It retrieves the entity with the given id and saves updates to the database."),Object(s.b)("li",{parentName:"ul"},"delete(): This method takes an id argument of type number. It deletes the enitity matching the id from the database."),Object(s.b)("li",{parentName:"ul"},"paginate(): This method takes an optional query argument of type CommonSearchQuery and an optional relations argument of type string[]. It paginates the entities of type K in the repository based on the query argument and returns a PaginationResponse object that contains the paginated data and metadata."),Object(s.b)("li",{parentName:"ul"},"serialize(): Serializes the given model to the specified serializeToClass. The method returns the serialized instance of the given class.")),Object(s.b)("h2",{id:"using-the-baseservice"},"Using the BaseService"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-javascript"},"\nimport { Service } from 'typedi';\n\n@Service()\nexport class UserService extends BaseService<UserEntity> {\n    @GetRepository(UserEntity)\n    protected readonly repository: Repository<UserEntity>;\n    protected readonly filterColumns = ['firstName', 'lastName']; // filters are applied on firstName and lastName columns\n\n}\n\n")),Object(s.b)("p",null,"By injecting the UserService, you can make use of the built in methods for basic CRUD operations on the UserEntity relation."))}void 0!==d&&d&&d===Object(d)&&Object.isExtensible(d)&&!Object.prototype.hasOwnProperty.call(d,"__filemeta")&&Object.defineProperty(d,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/base-services.mdx"}}),d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-base-services-mdx-fb65501842c29ecc3eae.js.map