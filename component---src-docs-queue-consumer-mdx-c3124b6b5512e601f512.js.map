{"version":3,"sources":["webpack:///../src/docs/queue-consumer.mdx"],"names":["_frontmatter","Object","isExtensible","prototype","hasOwnProperty","call","defineProperty","configurable","value","name","filename","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"mappings":"yRAMaA,EAAe,QAAG,IAAAA,UAAAC,OAAAD,IAAAC,OAAAC,aAAAF,KAAAC,OAAAE,UAAAC,eAAAC,KAAAL,EAAA,eAAAC,OAAAK,eAAAN,EAAA,cAAAO,cAAA,EAAAC,MAAA,CAAAC,KAAA,eAAAC,SAAA,iCAC/B,MAAMC,EAAc,CAClBX,gBAEIY,EAAYC,IACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIE,EAAKC,YAAAH,EAAAI,GAER,OAAOC,YAACR,EAASS,YAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,cAG5EF,YAAA,MACE,GAAM,oBAAkB,oBAE1BA,YAAA,gBAAWA,YAAA,cAAYG,WAAW,KAAG,YAA0B,6MAA8MH,YAAA,cAAYG,WAAW,KAAG,YAA0B,4BAA6BH,YAAA,cAAYG,WAAW,KAAG,YAA0B,oFAAqFH,YAAA,cAAYG,WAAW,KAAG,YAA0B,mBAAoBH,YAAA,cAAYG,WAAW,KAAG,YAA0B,oHACnmBH,YAAA,kBACEA,YAAA,KAAGG,WAAW,cAAY,iFAE5BH,YAAA,WAAKA,YAAA,QAAMG,WAAW,MAClB,UAAa,uBAAqB,0aAetCH,YAAA,wCAAmCA,YAAA,cAAYG,WAAW,KAAG,iBAA+B,yEAA0EH,YAAA,cAAYG,WAAW,KAAG,gBAA8B,iDAGjO,IAAAT,UAAAb,OAAAa,IAAAb,OAAAC,aAAAY,KAAAb,OAAAE,UAAAC,eAAAC,KAAAS,EAAA,eAAAb,OAAAK,eAAAQ,EAAA,cAAAP,cAAA,EAAAC,MAAA,CAAAC,KAAA,aAAAC,SAAA,iCAEDI,EAAWU,gBAAiB","file":"component---src-docs-queue-consumer-mdx-c3124b6b5512e601f512.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"C:/Users/Sonish Maharjan/Desktop/texpress/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"queue---consumer\"\n    }}>{`Queue - Consumer`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Consumer`}</inlineCode>{` is responsible for consuming the messages passed to different queues. Texpress comes with a separate application for consuming queues. To create a consumer, create your consumer class by extending the `}<inlineCode parentName=\"p\">{`Consumer`}</inlineCode>{` class imported from the `}<inlineCode parentName=\"p\">{`rabbitmq`}</inlineCode>{` package. Then register your message handler by decorating the methods using the `}<inlineCode parentName=\"p\">{`@Consume`}</inlineCode>{` decorator. The `}<inlineCode parentName=\"p\">{`@Consume`}</inlineCode>{` decorator takes two arguments, the name of the exchange and the name of the routing key the queue is binded to.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Make sure to start the consumer application to start consuming the messages.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`\nimport { ConsumeMessage } from 'amqplib';\nimport { Consume, Consumer } from 'rabbitmq';\n\nexport class ActivityLogConsumer extends Consumer {\n\n    @Consume('CMS_EXCHANGE', 'activity_log')\n    async onActivityLog(message: ConsumeMessage) {\n        const activityLogPayload = JSON.parse(message.content.toString());\n        console.log(\"Payload consumed on activity_log queue\", activityLogPayload);\n    }\n}\n\n`}</code></pre>\n    <p>{`Above example registers the `}<inlineCode parentName=\"p\">{`onActivityLog`}</inlineCode>{` method as the message handler for all the messages that lands on the `}<inlineCode parentName=\"p\">{`activity_log`}</inlineCode>{` queue in the 'CMS_EXCHANGE' exchange. `}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}