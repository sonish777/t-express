(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{uqBi:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return c})),n.d(t,"default",(function(){return d}));var a=n("IKa1"),o=n("Yh9w"),r=(n("r0ML"),n("V0Ug")),i=n("sN0p");n("xH0s");const s=["components"],c={};void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!Object.prototype.hasOwnProperty.call(c,"__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/database.mdx"}});const p={_frontmatter:c},b=i.a;function d(e){let{components:t}=e,n=Object(o.a)(e,s);return Object(r.b)(b,Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"database-connections-and-repositories"},"Database Connections and Repositories"),Object(r.b)("p",null,"Typedi uses ",Object(r.b)("inlineCode",{parentName:"p"},"typeorm")," as the ORM for interacting with the database. The database connection is a shared library located in the ",Object(r.b)("inlineCode",{parentName:"p"},"shared")," package since both API and CMS share a common database connection. By default, texpress comes with PostgreSQL database connection configured. You may change the configurations as desired."),Object(r.b)("h2",{id:"creating-database-connections"},"Creating Database Connections"),Object(r.b)("p",null,"To create database connections, create a class extending the ",Object(r.b)("inlineCode",{parentName:"p"},"Database")," abstract class from ",Object(r.b)("inlineCode",{parentName:"p"},"core")," package and set the conection property to the ",Object(r.b)("inlineCode",{parentName:"p"},"DataSource")," for the database dialect of your choice. Connection is initialized by calling the ",Object(r.b)("inlineCode",{parentName:"p"},"init()")," method."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-javascript"},"\nclass PostgresConnection extends Database {\n    public connection: DataSource = new DataSource({\n        type: 'postgres',\n        // ...other database configurations\n    });\n\n    constructor() {\n        super();\n        this.init();\n    }\n}\n\nexport const postgresDataSource = new PostgresConnection().connection;\n\n")),Object(r.b)("h2",{id:"repositories"},"Repositories"),Object(r.b)("p",null,"Repositories in typeorm provide a way to interact with a particular entity type in your database. A repository is responsible for creating, updating, deleting, and querying entities of a specific type.",Object(r.b)("br",{parentName:"p"}),"\n","Texpress comes with built in decorators that helps you manage your repositories and ensure that they are properly injected into the parts of your application where they are needed. These decorators include:"),Object(r.b)("h4",{id:"creating-an-injectable-repository"},"Creating an Injectable Repository"),Object(r.b)("p",null,"When creating the repository, use ",Object(r.b)("inlineCode",{parentName:"p"},"@SetRepository()")," decorator on your entity class. The decorator takes the typeorm data source as the first argument. This data source is the database connection instance exported by your database connection file."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-javascript"},"@Entity({ name: 'users' })\n@SetRepository(postgresConnection)\nclass UserEntity {\n    @Column()\n    id: number;\n}\n")),Object(r.b)("h4",{id:"injecting-a-repository"},"Injecting a Repository"),Object(r.b)("p",null,"To inject a repository, use ",Object(r.b)("inlineCode",{parentName:"p"},"@GetRepository()")," decorator on the class property. This decorator retrieves the repository instance for the specified entity and injects it into the class property. The decorator takes the Entity class for which the repository is to be injected as the first argument"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-javascript"},"\nclass UserService {\n\n    @GetRepository(UserEntity)\n    private readonly userRepository: Repository<UserEntity>;\n\n    constructor() {}\n\n    findAll() {\n        return this.userRepository.find();\n    }\n}\n\n")),Object(r.b)("p",null,"Repositories are always injected outside of the constructor (unlike the contructor based injection used in typedi)."))}void 0!==d&&d&&d===Object(d)&&Object.isExtensible(d)&&!Object.prototype.hasOwnProperty.call(d,"__filemeta")&&Object.defineProperty(d,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/database.mdx"}}),d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-database-mdx-6d412b66ee060cc2a406.js.map