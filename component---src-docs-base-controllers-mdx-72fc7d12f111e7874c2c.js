(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{sHBW:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return i})),n.d(t,"default",(function(){return p}));var r=n("IKa1"),a=n("Yh9w"),o=(n("r0ML"),n("V0Ug")),s=n("sN0p");n("xH0s");const l=["components"],i={};void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&!Object.prototype.hasOwnProperty.call(i,"__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/base-controllers.mdx"}});const b={_frontmatter:i},c=s.a;function p(e){let{components:t}=e,n=Object(a.a)(e,l);return Object(o.b)(c,Object(r.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"base-controllers"},"Base Controllers"),Object(o.b)("p",null,"Texpress comes with built-in abstract base controllers that already consists of some common methods needed for a route handler. There are two base controllers that can be extended, a ",Object(o.b)("inlineCode",{parentName:"p"},"BaseController")," and an ",Object(o.b)("inlineCode",{parentName:"p"},"ApiBaseController"),"."),Object(o.b)("h2",{id:"basecontroller"},"BaseController"),Object(o.b)("p",null,"This base controller is to be extended for CMS controllers. It consists of properties and methods that could be shared for all kinds of cms controllers."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Properties:"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"baseView: The name of the base layout view."),Object(o.b)("li",{parentName:"ul"},"viewPath: The name of the directory that contains the view for the current resource."),Object(o.b)("li",{parentName:"ul"},"title: The title of the page being rendered."),Object(o.b)("li",{parentName:"ul"},"page: The name of the current page view."))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Methods"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"setBreadcrumbs(): This method is used to set the breadcrumb for the current page. A breadcrumb object has two properties, ",Object(o.b)("inlineCode",{parentName:"li"},"url")," and ",Object(o.b)("inlineCode",{parentName:"li"},"name"),"."),Object(o.b)("li",{parentName:"ul"},"render(): This method is used to render the view. The first argument is the res object of Express, and the second argument is n Object that needs to be passed to the response.")))),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},"\nexport class AuthController extends BaseController {\n    protected _baseView = 'base-login';\n    _title = 'Auth';\n    _viewPath = 'auth';\n    _module = 'auth';\n\n    @Route({\n        path: '/login',\n        method: HTTPMethods.Get,\n    })\n    async loginView(req: Request, res: Response) {\n        this.page = 'login';\n        this.setBreadcrumbs([\n            { name: 'Login', url: '#' }\n        ]);\n        this.render(res);\n    }\n}\n\n")),Object(o.b)("p",null,"In above example, AuthController extends the BaseController and sets the common properties for it as required. For the ",Object(o.b)("inlineCode",{parentName:"p"},"/login")," route, the view is rendered from the path combined from ",Object(o.b)("inlineCode",{parentName:"p"},"views_directory/_viewPath/page"),"."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Renders view from ",Object(o.b)("strong",{parentName:"p"},"views/auth/login.ejs"))),Object(o.b)("h2",{id:"apibasecontroller"},"ApiBaseController"),Object(o.b)("p",null,"Similar to BaseController but for APIs. This base controller consists of methods that can be shared between the different controllers for APIs. It includes the following methods:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"ok(): Sends an 200 Ok response."),Object(o.b)("li",{parentName:"ul"},"created(): Sends a 201 Created response."),Object(o.b)("li",{parentName:"ul"},"deleted(): Sends a 204 No Content response."),Object(o.b)("li",{parentName:"ul"},"send(): Sends a payload with 200 Ok response."),Object(o.b)("li",{parentName:"ul"},"paginate(): Sends a paginated payload with 200 Ok response.")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},"@ApiController('/users')\nexport class ApiUserController extends APIBaseController {\n    @Route({ method: HTTPMethods.Get, path: '/:id' })\n    findUserByEmail(req: Request, res: Response) {\n        const data = getUserByEmail('test@test.com'); //get user\n        return this.send(res, data);\n    }\n}\n")),Object(o.b)("p",null,"Above example uses the ",Object(o.b)("inlineCode",{parentName:"p"},"send()")," method from the base controller to send the user entity as a response with 200 status."))}void 0!==p&&p&&p===Object(p)&&Object.isExtensible(p)&&!Object.prototype.hasOwnProperty.call(p,"__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/base-controllers.mdx"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-base-controllers-mdx-72fc7d12f111e7874c2c.js.map