{"version":3,"sources":["webpack:///../src/docs/middlewares.mdx"],"names":["_frontmatter","Object","isExtensible","prototype","hasOwnProperty","call","defineProperty","configurable","value","name","filename","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"mappings":"2RAMaA,EAAe,QAAG,IAAAA,UAAAC,OAAAD,IAAAC,OAAAC,aAAAF,KAAAC,OAAAE,UAAAC,eAAAC,KAAAL,EAAA,eAAAC,OAAAK,eAAAN,EAAA,cAAAO,cAAA,EAAAC,MAAA,CAAAC,KAAA,eAAAC,SAAA,8BAC/B,MAAMC,EAAc,CAClBX,gBAEIY,EAAYC,IACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIE,EAAKC,YAAAH,EAAAI,GAER,OAAOC,YAACR,EAASS,YAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,cAG5EF,YAAA,MACE,GAAM,6BAA2B,6BAEnCA,YAAA,gRACAA,YAAA,MACE,GAAM,kCAAgC,kCAExCA,YAAA,+HAA0HA,YAAA,cAAYG,WAAW,KAAG,YAA0B,sBAAuBH,YAAA,cAAYG,WAAW,KAAG,eAA6B,kHAC5PH,YAAA,MACE,GAAM,WAAS,WAEjBA,YAAA,WAAKA,YAAA,QAAMG,WAAW,MAClB,UAAa,uBAAqB,ojBAoBtCH,YAAA,oCAA+BA,YAAA,cAAYG,WAAW,KAAG,gBAA8B,8CAA+CH,YAAA,cAAYG,WAAW,KAAG,QAAsB,8JACtLH,YAAA,kBACEA,YAAA,KAAGG,WAAW,cAAY,WAAaH,YAAA,cAAYG,WAAW,KAAG,yBAAuC,kDAAmDH,YAAA,cAAYG,WAAW,KAAG,YAA0B,aAEjNH,YAAA,MACE,GAAM,iCAA+B,iCAEvCA,YAAA,mJACAA,YAAA,UACEA,YAAA,MAAIG,WAAW,MAAI,6BAA+BH,YAAA,UAAQG,WAAW,MAAI,UAAoB,+CAE/FH,YAAA,WAAKA,YAAA,QAAMG,WAAW,MAClB,UAAa,uBAAqB,0EAKtCH,YAAA,kBACEA,YAAA,KAAGG,WAAW,cAAY,OAASH,YAAA,cAAYG,WAAW,KAAG,YAA0B,cAAeH,YAAA,cAAYG,WAAW,KAAG,oBAAkC,wDAEpKH,YAAA,MACE,MAAS,GAETA,YAAA,MAAIG,WAAW,MAAI,6BAA+BH,YAAA,UAAQG,WAAW,MAAI,WAAqB,yDAA0DH,YAAA,cAAYG,WAAW,MAAI,qBAAmC,qCAExNH,YAAA,WAAKA,YAAA,QAAMG,WAAW,MAClB,UAAa,uBAAqB,6IAStCH,YAAA,kBACEA,YAAA,KAAGG,WAAW,cAAaH,YAAA,cAAYG,WAAW,KAAG,cAA4B,6EAItF,IAAAT,UAAAb,OAAAa,IAAAb,OAAAC,aAAAY,KAAAb,OAAAE,UAAAC,eAAAC,KAAAS,EAAA,eAAAb,OAAAK,eAAAQ,EAAA,cAAAP,cAAA,EAAAC,MAAA,CAAAC,KAAA,aAAAC,SAAA,8BAEDI,EAAWU,gBAAiB","file":"component---src-docs-middlewares-mdx-faf576eeff3bd925558c.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"C:/Users/Sonish Maharjan/Desktop/texpress/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"middlewares-and-providers\"\n    }}>{`Middlewares and Providers`}</h1>\n    <p>{`Middlewares are basically Express middlewares. Middleware Providers on the other hand are also middlewares but they require extra configuration and have extra logic attached to them. They help to segregate such logic to the concerned middleware being applied.`}</p>\n    <h2 {...{\n      \"id\": \"creating-a-middleware-provider\"\n    }}>{`Creating a middleware provider`}</h2>\n    <p>{`Middleware providers are created as classes implementing the ProviderStaticMethod interface that enforces a static `}<inlineCode parentName=\"p\">{`register`}</inlineCode>{` method that takes `}<inlineCode parentName=\"p\">{`Express.App`}</inlineCode>{` as the first argument and an optional second argument that can be used to configure the middleware as needed.`}</p>\n    <h3 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\nclass CORSProvider implements ProviderStaticMethod<typeof CORSProvider> {\n    public static register(app: Express, whitelist: string[] = []) {\n        if (process.env.NODE_ENV === 'development') {\n            app.use(cors());\n        } else {\n            whitelist = [cmsUrl, apiUrl, ...whitelist];\n            app.use(\n                cors({\n                    origin: function (requestOrigin, callback) {\n                        // Whitelist the request origin\n                    },\n                })\n            );\n        }\n    }\n}\n\n`}</code></pre>\n    <p>{`In above above example, `}<inlineCode parentName=\"p\">{`CORSProvider`}</inlineCode>{` is a middleware provider for applying the `}<inlineCode parentName=\"p\">{`cors`}</inlineCode>{` middleware. The first argument is the Express.Application. The second argument is an array of string URLs that needs to be whitelisted for allowing CORS.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Passing `}<inlineCode parentName=\"p\">{`<typeof CORSProvider>`}</inlineCode>{` is needed to enforce overriding of the static `}<inlineCode parentName=\"p\">{`register`}</inlineCode>{` method.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"applying-middleware-providers\"\n    }}>{`Applying Middleware Providers`}</h2>\n    <p>{`Middleware providers are registered during the server startup process. There are 2 different ways of applying the middleware provider.`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Middleware Providers that `}<strong parentName=\"li\">{`do not`}</strong>{` require the second configuration argument`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`server.startup({\n    middlewareProviders: [PassportProvider],\n});\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`The `}<inlineCode parentName=\"p\">{`register`}</inlineCode>{` method in `}<inlineCode parentName=\"p\">{`PassportProvider`}</inlineCode>{` doesn't require the second configuration argument.`}</p>\n    </blockquote>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`Middleware Providers that `}<strong parentName=\"li\">{`require`}</strong>{` the second configuration argument. For this, use the `}<inlineCode parentName=\"li\">{`provideMiddleware`}</inlineCode>{` function from the core package.`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\nserver.startup({\n    middlewareProviders: [\n        provideMiddleware<string[]>(CORSProvider, ['url_to_whitelist']),\n    ]\n});\n\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\"><inlineCode parentName=\"p\">{`<string[]>`}</inlineCode>{` is used to add type support for passing argument to the provider.`}</p>\n    </blockquote>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}