(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{mTQr:function(e,a,t){"use strict";t.r(a),t.d(a,"_frontmatter",(function(){return o})),t.d(a,"default",(function(){return p}));var i=t("IKa1"),n=t("Yh9w"),r=(t("r0ML"),t("V0Ug")),l=t("sN0p");t("xH0s");const s=["components"],o={};void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!Object.prototype.hasOwnProperty.call(o,"__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/validators.mdx"}});const d={_frontmatter:o},c=l.a;function p(e){let{components:a}=e,t=Object(n.a)(e,s);return Object(r.b)(c,Object(i.a)({},d,t,{components:a,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"validators"},"Validators"),Object(r.b)("p",null,"Texpress uses express-validator to validate incoming requests. Validators are created by implementing the ValidatorWithStaticProps generic type, that takes the type of current ValidatorClass as the type argument. To add validation rules, define a ",Object(r.b)("inlineCode",{parentName:"p"},"getter")," for ",Object(r.b)("inlineCode",{parentName:"p"},"static")," property named ",Object(r.b)("inlineCode",{parentName:"p"},"rules")," in the class. The rules are basically Objects with name of the fields to validate as ",Object(r.b)("inlineCode",{parentName:"p"},"keys")," and express validation chain as ",Object(r.b)("inlineCode",{parentName:"p"},"values"),"."),Object(r.b)("h2",{id:"creating-a-validator"},"Creating a Validator"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-javascript"},"\nclass CreateRoleValidator\n    implements ValidatorWithStaticProps<typeof CreateRoleValidator>\n{\n    static get rules(): Record<string, ValidationChain> {\n        return {\n            name: // Some rules for name field\n            slug: // Some rules for slug field\n        };\n    }\n}\n\n/* Use these validators by passing these Validators in the validators array whilst registering routes */\n\n@Controller('/roles')\nclass RoleController {\n\n    @Route({\n        path: '/',\n        method: HttpMethods.Post,\n        validators: [CreateRoleValidator] // Pass validators here\n    })\n    create() {\n\n    }\n\n}\n\n")),Object(r.b)("h2",{id:"defining-rules-using-validationbuilder"},"Defining Rules using ValidationBuilder"),Object(r.b)("p",null,"ValidationBuilder from core package can be used to easily define validation rules. ValidationBuilder is a utility class that provides static methods to chain multiple validation rules. ValidationBuilder uses express-validator under the hood to construct the validation chain.",Object(r.b)("br",{parentName:"p"}),"\n",Object(r.b)("strong",{parentName:"p"},"Using ValidationBuilder gives you advantage of customizing and re-using already created Validators.")),Object(r.b)("h3",{id:"chaining-rules"},"Chaining Rules"),Object(r.b)("p",null,"To define rules for a field, start chaining the methods followed by the ",Object(r.b)("inlineCode",{parentName:"p"},"ForField()")," staic method. After chaining the methods, chain the ",Object(r.b)("inlineCode",{parentName:"p"},"build()")," method at the end to build the validation chain."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-javascript"},"class CreateRoleValidator\n    implements ValidatorWithStaticProps<typeof CreateRoleValidator>\n{\n    static get rules(): Record<string, ValidationChain> {\n        return {\n            name: ValidationBuilder.ForField('name')\n                .Required()\n                .MinCharacters(5)\n                .build(),\n        };\n    }\n}\n")),Object(r.b)("p",null,"Each validation rule takes an optional ",Object(r.b)("inlineCode",{parentName:"p"},"ValidationOptions")," argument that has a 'fieldDisplayName' and 'message' optional properties."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"fieldDisplayName",Object(r.b)("br",{parentName:"p"}),"\n",Object(r.b)("inlineCode",{parentName:"p"},"fieldDisplayName")," is used to replace the field's name in the validation message.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"message","_","_","\n",Object(r.b)("inlineCode",{parentName:"p"},"message")," is used to pass a custom validation message."))),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-javascript"},"\nclass CreateRoleValidator\n    implements ValidatorWithStaticProps<typeof CreateRoleValidator>\n{\n    static get rules(): Record<string, ValidationChain> {\n        return {\n            name: ValidationBuilder\n                    .ForField('name')\n                    .Required({\n                        message: \"Name is required\"\n                    })\n                    .build()\n            slug: ValidationBuilder\n                    .ForField('slug')\n                    .Required({ fieldDisplayName: 'Slugged Text'})\n                    .build()\n        };\n    }\n}\n\n")),Object(r.b)("p",null,"In above example, the name field uses a custom validation message: ",Object(r.b)("inlineCode",{parentName:"p"},"Name is required")," . In case of slug, the validation is formed by replacing the ",Object(r.b)("inlineCode",{parentName:"p"},"fieldDisplayName")," in the generic required message. Generic required messages are validation message constants exported from the core package."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-javascript"},"ValidationMessages = {\n    required: '%field% is a required field',\n    // other validation messages\n};\n")),Object(r.b)("p",null,"These validation messages will be as follows:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"For name field: ",Object(r.b)("strong",{parentName:"li"},"Name is required.")),Object(r.b)("li",{parentName:"ul"},"For slug field: ",Object(r.b)("strong",{parentName:"li"},"Slugged Text is a required field."))),Object(r.b)("h2",{id:"creating-custom-validators"},"Creating Custom Validators"),Object(r.b)("p",null,"Custom validators can be created by implementing the CustomValidator interface imported from the core package. The CustomValidator interface requires a validate method to be implemented. The validate method takes two arguments: the value of the field the validation rule is applied to, and second ",Object(r.b)("inlineCode",{parentName:"p"},"Meta")," argument of the express-validator which contains the current request and path metadata."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-javascript"},"\nclass UniqueValidator implements CustomValidator {\n    @GetRepository(UserEntity)\n    protected readonly repository: Repository<UserEntity>;\n\n    async validate(value: string, { req, path }: Meta) {\n        // use repository to check if email already exists in the db and throw error if exists.\n    }\n}\n\n")),Object(r.b)("p",null,"To apply the custom validator, simply use the ",Object(r.b)("inlineCode",{parentName:"p"},"Custom")," method from the ValidationBuilder interface."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-javascript"},"class CreateRoleValidator\n    implements ValidatorWithStaticProps<typeof CreateRoleValidator>\n{\n    static get rules(): Record<string, ValidationChain> {\n        return {\n            slug: ValidationBuilder.ForField('slug')\n                .Custom(UniqueValidator) // Pass the custom validator here\n                .build(),\n            // ...other validation rules\n        };\n    }\n}\n")),Object(r.b)("h2",{id:"using-express-validator"},"Using express-validator"),Object(r.b)("p",null,"If for some reason, you wish to stick to using express-validator, simply chain the validation rules from express-validator in the same way we did with the ",Object(r.b)("inlineCode",{parentName:"p"},"ValidationBuilder"),"."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-javascript"},"import { check } from 'express-validator';\n\nclass CreateRoleValidator\n    implements ValidatorWithStaticProps<typeof CreateRoleValidator>\n{\n    static get rules(): Record<string, ValidationChain> {\n        return {\n            name: check('name').notEmpty().withMessage('Name is required'),\n            // ...other validation rules\n        };\n    }\n}\n")))}void 0!==p&&p&&p===Object(p)&&Object.isExtensible(p)&&!Object.prototype.hasOwnProperty.call(p,"__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/validators.mdx"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-validators-mdx-276a01baf4bc93c8657b.js.map