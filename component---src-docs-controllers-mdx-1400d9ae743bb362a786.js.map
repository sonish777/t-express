{"version":3,"sources":["webpack:///../src/docs/controllers.mdx"],"names":["_frontmatter","Object","isExtensible","prototype","hasOwnProperty","call","defineProperty","configurable","value","name","filename","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"mappings":"wRAMaA,EAAe,QAAG,IAAAA,UAAAC,OAAAD,IAAAC,OAAAC,aAAAF,KAAAC,OAAAE,UAAAC,eAAAC,KAAAL,EAAA,eAAAC,OAAAK,eAAAN,EAAA,cAAAO,cAAA,EAAAC,MAAA,CAAAC,KAAA,eAAAC,SAAA,8BAC/B,MAAMC,EAAc,CAClBX,gBAEIY,EAAYC,IACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIE,EAAKC,YAAAH,EAAAI,GAER,OAAOC,YAACR,EAASS,YAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,cAG5EF,YAAA,MACE,GAAM,kCAAgC,kCAExCA,YAAA,MACE,GAAM,eAAa,eAErBA,YAAA,yJACAA,YAAA,MACE,GAAM,wBAAsB,wBAE9BA,YAAA,+EAA0EA,YAAA,cAAYG,WAAW,KAAG,gBAA8B,OAAQH,YAAA,cAAYG,WAAW,KAAG,mBAAiC,4BAA6BH,YAAA,cAAYG,WAAW,KAAG,QAAsB,yEAClRH,YAAA,WAAKA,YAAA,QAAMG,WAAW,MAClB,UAAa,uBAAqB,+GAOtCH,YAAA,MACE,GAAM,wBAAsB,wBAE9BA,YAAA,gBAAWA,YAAA,cAAYG,WAAW,KAAG,gBAA8B,qDAAsDH,YAAA,cAAYG,WAAW,KAAG,WAAyB,uJAC5KH,YAAA,WAAKA,YAAA,QAAMG,WAAW,MAClB,UAAa,uBAAqB,iRAUtCH,YAAA,kBACEA,YAAA,KAAGG,WAAW,cAAY,yBAA2BH,YAAA,cAAYG,WAAW,KAAG,OAAqB,+DAAgEH,YAAA,cAAYG,WAAW,KAAG,2BAAyC,kFAEzOH,YAAA,MACE,GAAM,kBAAgB,kBAExBA,YAAA,wGAAmGA,YAAA,cAAYG,WAAW,KAAG,WAAyB,0JACtJH,YAAA,UACEA,YAAA,MAAIG,WAAW,MAAI,wBACnBH,YAAA,MAAIG,WAAW,MAAI,4BACnBH,YAAA,MAAIG,WAAW,MAAI,iFACnBH,YAAA,MAAIG,WAAW,MAAI,2LAA6LH,YAAA,cAAYG,WAAW,MAAI,cAA4B,gBAEzQH,YAAA,kBACEA,YAAA,KAAGG,WAAW,cAAY,wGAE5BH,YAAA,WAAKA,YAAA,QAAMG,WAAW,MAClB,UAAa,uBAAqB,0LAStCH,YAAA,sEAAiEA,YAAA,cAAYG,WAAW,KAAG,eAA6B,uBAAwBH,YAAA,cAAYG,WAAW,KAAG,UAAwB,sEAGrM,IAAAT,UAAAb,OAAAa,IAAAb,OAAAC,aAAAY,KAAAb,OAAAE,UAAAC,eAAAC,KAAAS,EAAA,eAAAb,OAAAK,eAAAQ,EAAA,cAAAP,cAAA,EAAAC,MAAA,CAAAC,KAAA,aAAAC,SAAA,8BAEDI,EAAWU,gBAAiB","file":"component---src-docs-controllers-mdx-1400d9ae743bb362a786.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"C:/Users/Sonish Maharjan/Desktop/texpress/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"controllers-and-route-handlers\"\n    }}>{`Controllers and Route Handlers`}</h1>\n    <h2 {...{\n      \"id\": \"controllers\"\n    }}>{`Controllers`}</h2>\n    <p>{`Controllers are classes that has methods for handling requests for the current resource. Controllers are created with the help of decoratos.`}</p>\n    <h3 {...{\n      \"id\": \"creating-controllers\"\n    }}>{`Creating controllers`}</h3>\n    <p>{`To create a controller, create a class and decorate it with either `}<inlineCode parentName=\"p\">{`Controller()`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`ApiController()`}</inlineCode>{` decorator imported from `}<inlineCode parentName=\"p\">{`core`}</inlineCode>{` packages. Both the decorators take a base url as the first argument.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`@Controller('/auth')\nclass AuthController {}\n\n@ApiController('/api-auth')\nclass ApiAuthController {}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"fallback-controllers\"\n    }}>{`Fallback controllers`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Controller()`}</inlineCode>{` decorator also takes an optional second argument `}<inlineCode parentName=\"p\">{`options`}</inlineCode>{` for marking the controller as a fallback controller. Fallback controllers are used to handle unknown requests (or routes that are not registered).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\n@Controller('*', { fallback: true }) {\n    @Route({ path: '', method: HTTPMethods.All })\n    handleFallback(_req: Request, _res: Response, next: NextFunction) {\n        return next(new HttpException(HttpStatus.NOT_FOUND, 'Unknown Route Not found'));\n    }\n}\n\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`In above example, the `}<inlineCode parentName=\"p\">{`'*'`}</inlineCode>{` is used so that the handler will catch any routes, and the `}<inlineCode parentName=\"p\">{`HttpMethods.ALL ('all')`}</inlineCode>{` is used to identify that the handler should catch any kinds of HTTP methods.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"route-handlers\"\n    }}>{`Route Handlers`}</h2>\n    <p>{`Similar to controllers, route handlers are also registered with the help of decorators. The `}<inlineCode parentName=\"p\">{`Route()`}</inlineCode>{` decorator is used to mark a method as a route handler. The route method requires a configuration argument to be provided. The configurations include:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`path: The route url.`}</li>\n      <li parentName=\"ul\">{`method: The HTTP method.`}</li>\n      <li parentName=\"ul\">{`middlewares: An optional array of the middlewares to be applied to the route;`}</li>\n      <li parentName=\"ul\">{`validators: An optional array of validators to be applied to the route. This is used for POST HTTP requests for validating the request payload. For creating these validators, take the `}<inlineCode parentName=\"li\">{`Validators`}</inlineCode>{` reference;`}</li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note: The controller base path and the route path together are used to define the route parameters.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`@Controller('/users')\nclass UserController {\n    @Route({ path: '/find', method: HttpMethods.GET })\n    find(req: Request, res: Response) {\n        // implementation\n    }\n}\n`}</code></pre>\n    <p>{`In above example, a GET HTTP route is registered for path `}<inlineCode parentName=\"p\">{`/users/find`}</inlineCode>{`. The route handler `}<inlineCode parentName=\"p\">{`find()`}</inlineCode>{` follows the same method definition as the Express.Handlers.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}