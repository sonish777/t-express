{"version":3,"sources":["webpack:///../src/docs/reusing-validators.mdx"],"names":["_frontmatter","Object","isExtensible","prototype","hasOwnProperty","call","defineProperty","configurable","value","name","filename","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"mappings":"yRAMaA,EAAe,QAAG,IAAAA,UAAAC,OAAAD,IAAAC,OAAAC,aAAAF,KAAAC,OAAAE,UAAAC,eAAAC,KAAAL,EAAA,eAAAC,OAAAK,eAAAN,EAAA,cAAAO,cAAA,EAAAC,MAAA,CAAAC,KAAA,eAAAC,SAAA,qCAC/B,MAAMC,EAAc,CAClBX,gBAEIY,EAAYC,IACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIE,EAAKC,YAAAH,EAAAI,GAER,OAAOC,YAACR,EAASS,YAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,cAG5EF,YAAA,MACE,GAAM,sBAAoB,sBAE5BA,YAAA,mBAAcA,YAAA,cAAYG,WAAW,KAAG,aAA2B,sCAAuCH,YAAA,cAAYG,WAAW,KAAG,eAA6B,+HAAgIH,YAAA,cAAYG,WAAW,KAAG,QAAsB,YAAaH,YAAA,MAAIG,WAAW,MAAS,uQAEtXH,YAAA,WAAKA,YAAA,QAAMG,WAAW,MAClB,UAAa,uBAAqB,glCA4BtCH,YAAA,qCAAgCA,YAAA,cAAYG,WAAW,KAAG,uBAAqC,oEAAqEH,YAAA,cAAYG,WAAW,KAAG,SAAuB,WACrNH,YAAA,WAAKA,YAAA,QAAMG,WAAW,MAClB,UAAa,uBAAqB,+NAKtCH,YAAA,iFAA4EA,YAAA,cAAYG,WAAW,KAAG,gBAA8B,wDAAyDH,YAAA,cAAYG,WAAW,KAAG,WAAyB,YAChPH,YAAA,WAAKA,YAAA,QAAMG,WAAW,MAClB,UAAa,uBAAqB,wqBAoBzC,IAAAT,UAAAb,OAAAa,IAAAb,OAAAC,aAAAY,KAAAb,OAAAE,UAAAC,eAAAC,KAAAS,EAAA,eAAAb,OAAAK,eAAAQ,EAAA,cAAAP,cAAA,EAAAC,MAAA,CAAAC,KAAA,aAAAC,SAAA,qCAEDI,EAAWU,gBAAiB","file":"component---src-docs-reusing-validators-mdx-711bef3a5fb75e337e6e.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"C:/Users/Sonish Maharjan/Desktop/texpress/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"reusing-validators\"\n    }}>{`Reusing Validators`}</h1>\n    <p>{`Once a `}<inlineCode parentName=\"p\">{`Validator`}</inlineCode>{` has been created, you can use the `}<inlineCode parentName=\"p\">{`customize()`}</inlineCode>{` utility method to customize it and reuse it for validating different requests. The customize function is exported from the `}<inlineCode parentName=\"p\">{`core`}</inlineCode>{` package.`}<br parentName=\"p\"></br>{`\n`}{`To customize a Validator, pass the Validator you wish to customize to the customize() utility method that returns a customizer. You can then use this customizer to remove some rules, replace rules for existing fields, or make some of the fields optional.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class CreateUserValidator\n    implements ValidatorWithStaticProps<typeof CreateUserValidator>\n{\n    static get rules(): Record<string, ValidationChain> {\n        return {\n            name: ValidationBuilder.ForField('name')\n                .Required({ fieldDisplayName: 'Name' })\n                .MinCharacters(3, { fieldDisplayName: 'Name' })\n                .MaxCharacters(25, { fieldDisplayName: 'Name' })\n                .build(),\n            email: ValidationBuilder.ForField('email')\n                .Required({ fieldDisplayName: 'Email' })\n                .IsEmail({ fieldDisplayName: 'Email' })\n                .Custom(UniqueEmailValidator)\n                .build(),\n            password: ValidationBuilder.ForField('password')\n                .If(\n                    (_value: string, { req }: Meta) =>\n                        req.body.sendActivationLink !== 'on'\n                )\n                .MinCharacters(8, { fieldDisplayName: 'password' })\n                .MaxCharacters(20, { fieldDisplayName: 'password' })\n                .build(),\n        };\n    }\n}\n`}</code></pre>\n    <p>{`Now lets customize above `}<inlineCode parentName=\"p\">{`CreateUserValidator`}</inlineCode>{` to be used for a forgot password action which only requires the `}<inlineCode parentName=\"p\">{`email`}</inlineCode>{` field.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const forgotPasswordValidatorCustomizer = customize(CreateUserValidator);\nforgotPasswordValidatorCustomizer.removeRules(['name', 'password']);\nexport const ForgotPassword = forgotPasswordValidatorCustomizer.done();\n`}</code></pre>\n    <p>{`Similar to this, you may also make some fields optional by using the `}<inlineCode parentName=\"p\">{`makeOptional`}</inlineCode>{` method or replace rules for some field by using the `}<inlineCode parentName=\"p\">{`replace`}</inlineCode>{` method.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Making email field optional\nconst validatorWithOptionalEmail = customize(CreateUserValidator);\nvalidatorWithOptionalEmail.makeOptional(['email'])\nexport const ValidatorWithOptionalEmail = validatorWithOptionalEmail.done();\n\n// Replacing email field to remove the UniqueEmailValidator rule\nconst validatorWithoutUniqueEmail = customize(CreateUserValidator);\nconst validatorWithoutUniqueEmail.replace(\n    'email',\n    ValidationBuilder.ForField('email')\n        .Required({ fieldDisplayName: 'Email' })\n        .IsEmail({ fieldDisplayName: 'Email' })\n        .build()\n);\nexport const ValidatorWithoutUniqueEmail = validatorWithoutUniqueEmail.done();\n\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}