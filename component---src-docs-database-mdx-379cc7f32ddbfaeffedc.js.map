{"version":3,"sources":["webpack:///../src/docs/database.mdx"],"names":["_frontmatter","Object","isExtensible","prototype","hasOwnProperty","call","defineProperty","configurable","value","name","filename","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"mappings":"wRAMaA,EAAe,QAAG,IAAAA,UAAAC,OAAAD,IAAAC,OAAAC,aAAAF,KAAAC,OAAAE,UAAAC,eAAAC,KAAAL,EAAA,eAAAC,OAAAK,eAAAN,EAAA,cAAAO,cAAA,EAAAC,MAAA,CAAAC,KAAA,eAAAC,SAAA,2BAC/B,MAAMC,EAAc,CAClBX,gBAEIY,EAAYC,IACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIE,EAAKC,YAAAH,EAAAI,GAER,OAAOC,YAACR,EAASS,YAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,cAG5EF,YAAA,MACE,GAAM,yCAAuC,yCAE/CA,YAAA,wBAAmBA,YAAA,cAAYG,WAAW,KAAG,WAAyB,6GAA8GH,YAAA,cAAYG,WAAW,KAAG,UAAwB,gMACtOH,YAAA,MACE,GAAM,iCAA+B,iCAEvCA,YAAA,yEAAoEA,YAAA,cAAYG,WAAW,KAAG,YAA0B,wBAAyBH,YAAA,cAAYG,WAAW,KAAG,QAAsB,kDAAmDH,YAAA,cAAYG,WAAW,KAAG,cAA4B,sFAAuFH,YAAA,cAAYG,WAAW,KAAG,UAAwB,YACnbH,YAAA,WAAKA,YAAA,QAAMG,WAAW,MAClB,UAAa,uBAAqB,gVAiBtCH,YAAA,MACE,GAAM,gBAAc,gBAEtBA,YAAA,qNAAgNA,YAAA,MAAIG,WAAW,MAAS,uNAExOH,YAAA,MACE,GAAM,qCAAmC,qCAE3CA,YAAA,8CAAyCA,YAAA,cAAYG,WAAW,KAAG,oBAAkC,uMACrGH,YAAA,WAAKA,YAAA,QAAMG,WAAW,MAClB,UAAa,uBAAqB,4HAQtCH,YAAA,MACE,GAAM,0BAAwB,0BAEhCA,YAAA,wCAAmCA,YAAA,cAAYG,WAAW,KAAG,oBAAkC,6PAC/FH,YAAA,WAAKA,YAAA,QAAMG,WAAW,MAClB,UAAa,uBAAqB,+NAetCH,YAAA,sIAGH,IAAAN,UAAAb,OAAAa,IAAAb,OAAAC,aAAAY,KAAAb,OAAAE,UAAAC,eAAAC,KAAAS,EAAA,eAAAb,OAAAK,eAAAQ,EAAA,cAAAP,cAAA,EAAAC,MAAA,CAAAC,KAAA,aAAAC,SAAA,2BAEDI,EAAWU,gBAAiB","file":"component---src-docs-database-mdx-379cc7f32ddbfaeffedc.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"C:/Users/Sonish Maharjan/Desktop/texpress/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"database-connections-and-repositories\"\n    }}>{`Database Connections and Repositories`}</h1>\n    <p>{`Typedi uses `}<inlineCode parentName=\"p\">{`typeorm`}</inlineCode>{` as the ORM for interacting with the database. The database connection is a shared library located in the `}<inlineCode parentName=\"p\">{`shared`}</inlineCode>{` package since both API and CMS share a common database connection. By default, texpress comes with PostgreSQL database connection configured. You may change the configurations as desired.`}</p>\n    <h2 {...{\n      \"id\": \"creating-database-connections\"\n    }}>{`Creating Database Connections`}</h2>\n    <p>{`To create database connections, create a class extending the `}<inlineCode parentName=\"p\">{`Database`}</inlineCode>{` abstract class from `}<inlineCode parentName=\"p\">{`core`}</inlineCode>{` package and set the conection property to the `}<inlineCode parentName=\"p\">{`DataSource`}</inlineCode>{` for the database dialect of your choice. Connection is initialized by calling the `}<inlineCode parentName=\"p\">{`init()`}</inlineCode>{` method.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\nclass PostgresConnection extends Database {\n    public connection: DataSource = new DataSource({\n        type: 'postgres',\n        // ...other database configurations\n    });\n\n    constructor() {\n        super();\n        this.init();\n    }\n}\n\nexport const postgresDataSource = new PostgresConnection().connection;\n\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"repositories\"\n    }}>{`Repositories`}</h2>\n    <p>{`Repositories in typeorm provide a way to interact with a particular entity type in your database. A repository is responsible for creating, updating, deleting, and querying entities of a specific type.`}<br parentName=\"p\"></br>{`\n`}{`Texpress comes with built in decorators that helps you manage your repositories and ensure that they are properly injected into the parts of your application where they are needed. These decorators include:`}</p>\n    <h4 {...{\n      \"id\": \"creating-an-injectable-repository\"\n    }}>{`Creating an Injectable Repository`}</h4>\n    <p>{`When creating the repository, use `}<inlineCode parentName=\"p\">{`@SetRepository()`}</inlineCode>{` decorator on your entity class. The decorator takes the typeorm data source as the first argument. This data source is the database connection instance exported by your database connection file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`@Entity({ name: 'users' })\n@SetRepository(postgresConnection)\nclass UserEntity {\n    @Column()\n    id: number;\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"injecting-a-repository\"\n    }}>{`Injecting a Repository`}</h4>\n    <p>{`To inject a repository, use `}<inlineCode parentName=\"p\">{`@GetRepository()`}</inlineCode>{` decorator on the class property. This decorator retrieves the repository instance for the specified entity and injects it into the class property. The decorator takes the Entity class for which the repository is to be injected as the first argument`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\nclass UserService {\n\n    @GetRepository(UserEntity)\n    private readonly userRepository: Repository<UserEntity>;\n\n    constructor() {}\n\n    findAll() {\n        return this.userRepository.find();\n    }\n}\n\n`}</code></pre>\n    <p>{`Repositories are always injected outside of the constructor (unlike the contructor based injection used in typedi).`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}