{"version":3,"sources":["webpack:///../src/docs/queue-publisher.mdx"],"names":["_frontmatter","Object","isExtensible","prototype","hasOwnProperty","call","defineProperty","configurable","value","name","filename","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"mappings":"yRAMaA,EAAe,QAAG,IAAAA,UAAAC,OAAAD,IAAAC,OAAAC,aAAAF,KAAAC,OAAAE,UAAAC,eAAAC,KAAAL,EAAA,eAAAC,OAAAK,eAAAN,EAAA,cAAAO,cAAA,EAAAC,MAAA,CAAAC,KAAA,eAAAC,SAAA,kCAC/B,MAAMC,EAAc,CAClBX,gBAEIY,EAAYC,IACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIE,EAAKC,YAAAH,EAAAI,GAER,OAAOC,YAACR,EAASS,YAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,cAG5EF,YAAA,MACE,GAAM,qBAAmB,qBAE3BA,YAAA,gBAAWA,YAAA,cAAYG,WAAW,KAAG,aAA2B,wHAAyHH,YAAA,cAAYG,WAAW,KAAG,aAA2B,4BAA6BH,YAAA,cAAYG,WAAW,KAAG,YAA0B,2CAC/TH,YAAA,MACE,GAAM,sBAAoB,sBAE5BA,YAAA,gBAAWA,YAAA,cAAYG,WAAW,KAAG,oBAAkC,0YACvEH,YAAA,WAAKA,YAAA,QAAMG,WAAW,MAClB,UAAa,uBAAqB,4UAetCH,YAAA,+DAA0DA,YAAA,cAAYG,WAAW,KAAG,gBAA8B,uCAAwCH,YAAA,cAAYG,WAAW,KAAG,gBAA8B,QAASH,YAAA,cAAYG,WAAW,KAAG,sBAAoC,KACzRH,YAAA,oJAA+IA,YAAA,cAAYG,WAAW,KAAG,mBAAiC,+EAC1MH,YAAA,WAAKA,YAAA,QAAMG,WAAW,MAClB,UAAa,uBAAqB,gWAatCH,YAAA,MACE,GAAM,gCAA8B,gCAEtCA,YAAA,gBAAWA,YAAA,cAAYG,WAAW,KAAG,aAA2B,kTAChEH,YAAA,WAAKA,YAAA,QAAMG,WAAW,MAClB,UAAa,uBAAqB,8jBAyBtCH,YAAA,iDAA4CA,YAAA,cAAYG,WAAW,KAAG,oBAAkC,uBAAwBH,YAAA,cAAYG,WAAW,KAAG,kBAAgC,2BAA4BH,YAAA,cAAYG,WAAW,KAAG,QAAsB,aAAcH,YAAA,cAAYG,WAAW,KAAG,uBAAqC,mEAGtV,IAAAT,UAAAb,OAAAa,IAAAb,OAAAC,aAAAY,KAAAb,OAAAE,UAAAC,eAAAC,KAAAS,EAAA,eAAAb,OAAAK,eAAAQ,EAAA,cAAAP,cAAA,EAAAC,MAAA,CAAAC,KAAA,aAAAC,SAAA,kCAEDI,EAAWU,gBAAiB","file":"component---src-docs-queue-publisher-mdx-9259de3f2da70a08e073.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"C:/Users/Sonish Maharjan/Desktop/texpress/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"queue---publisher\"\n    }}>{`Queue - Publisher`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Publisher`}</inlineCode>{` is responsible for registering queues, and publishing messages to those queues. For this, create an instance of the `}<inlineCode parentName=\"p\">{`Publisher`}</inlineCode>{` class imported from the `}<inlineCode parentName=\"p\">{`rabbitmq`}</inlineCode>{` package and use the following methods.`}</p>\n    <h2 {...{\n      \"id\": \"registering-queues\"\n    }}>{`Registering Queues`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`registerQueues()`}</inlineCode>{` method is responsible for registering queues with the exchange on the RabbitMQ server. The method takes 3 arguments, the name of the exchange to register the queue to, the routing keys for binding the queue to, and an optional options object that takes durableExchange and durableQueue properties. This method will create a queue for each routing key specified and bind it to the exchange.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { Publisher } from 'rabbitmq';\n\nclass SomeController {\n    constructor(\n        // Inject an instance of Publisher\n        private readonly publisher: Publisher\n    ) {\n        this.publisher.registerQueues('CMS_EXCHANGE', [\n            'activity_log',\n            'generate_thumbnail',\n        ]);\n    }\n}\n`}</code></pre>\n    <p>{`Above example registers two queues in the exchange `}<inlineCode parentName=\"p\">{`CMS_EXCHANGE`}</inlineCode>{` and binds them to the routing keys `}<inlineCode parentName=\"p\">{`activity_log`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`generate_thumbnail`}</inlineCode>{`.`}</p>\n    <p>{`Sometimes, it is often desirable to register to queues on system startup. To do this, wrap your application bootstrap function with the `}<inlineCode parentName=\"p\">{`InjectPublisher`}</inlineCode>{` higher order function to get the publisher instance as the first argument.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { InjectPublisher, Publisher } from 'rabbitmq';\n// Get the publisher instance as the first argument\nfunction bootstrap(publisher: Publisher) {\n    const server = new Server(controllers);\n    publisher.registerQueues('CMS_EXCHANGE', [\n        'activity_log',\n        'generate_thumbnail',\n    ]);\n}\n\nInjectPublisher(bootstrap)();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"publishing-messages-to-queue\"\n    }}>{`Publishing Messages to Queue`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`publish()`}</inlineCode>{` method is responsible for sending a message to the queue. This method will take the exchange name, routing key, and message as parameters and publish the message to the appropriate queue. This method takes 3 arguments: the exchange name, the routing key to pass the message to, and the message itself.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`interface IActivityLogPayload {\n    activityTimestamp: Date;\n    description: string;\n}\n\nclass MyService {\n    constructor(\n        // Inject the publisher instance\n        private readonly publisher: Publisher\n    ) {}\n\n    doSomethingAndPublishMessage() {\n        // do something...\n        this.publisher.publish<IActivityLogPayload>(\n            'CMS_EXCHANGE',\n            'activity_log',\n            {\n                activityTimestamp: new Date(),\n                description: \\`Someone did \"something\"\\`,\n            }\n        );\n    }\n}\n`}</code></pre>\n    <p>{`Above example publishes a message to `}<inlineCode parentName=\"p\">{`'activity_queue'`}</inlineCode>{` routing key in the `}<inlineCode parentName=\"p\">{`'CMS_EXCHANGE'`}</inlineCode>{` exchange. The optional `}<inlineCode parentName=\"p\">{`type`}</inlineCode>{` argument `}<inlineCode parentName=\"p\">{`IActivityLogPayload`}</inlineCode>{` can be passed to add type safety to the message payload.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}