(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{iBHQ:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return i})),n.d(t,"default",(function(){return p}));var o=n("IKa1"),r=n("Yh9w"),a=(n("r0ML"),n("V0Ug")),s=n("sN0p");n("xH0s");const c=["components"],i={};void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&!Object.prototype.hasOwnProperty.call(i,"__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/controller-error-handling.mdx"}});const l={_frontmatter:i},d=s.a;function p(e){let{components:t}=e,n=Object(r.a)(e,c);return Object(a.b)(d,Object(o.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"error-handing-in-controllers"},"Error Handing in Controllers"),Object(a.b)("p",null,"Instead of wrapping all route handler code with ",Object(a.b)("inlineCode",{parentName:"p"},"try catch")," blocks, you can use the ",Object(a.b)("inlineCode",{parentName:"p"},"@CatchAsync")," method decorator. This decorator catches any exceptions occured and passes it to the exception handlers list we discussed in the Exception Handlers section. From there, the responsible exception handler among the list will handle it."),Object(a.b)("h2",{id:"using-the-catchasync-decorator"},"Using the CatchAsync Decorator"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"\nimport { Controller, Route } from 'core/controllers';\nimport { CatchAsync } from 'core/exceptions';\n\n@Controller('/my-resource')\nclass MyResourceController {\n\n    @Route({\n        path: '/',\n        method: HTTPMethods.Post,\n    })\n    @CatchAsync // Handles any exceptions occured\n    async resetPassword(req: Request, res: Response) {\n        // create resource here\n    }\n}\n\n")),Object(a.b)("h2",{id:"using-api-response-decorators"},"Using API Response Decorators"),Object(a.b)("p",null,"In API controllers, you may use one of the following decorators to respond to the incoding request,"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"@RespondOK"),": Sends an ",Object(a.b)("inlineCode",{parentName:"li"},"OK")," response with ",Object(a.b)("inlineCode",{parentName:"li"},"200")," HTTP status code.  "),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"@RespondCreated"),": Sends an ",Object(a.b)("inlineCode",{parentName:"li"},"Created")," response with ",Object(a.b)("inlineCode",{parentName:"li"},"201")," HTTP status code. If passed ",Object(a.b)("inlineCode",{parentName:"li"},"true")," as the first argument, the newly created resource will be sent."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"@RespondDeleted"),": Sends a ",Object(a.b)("inlineCode",{parentName:"li"},"No Content")," response with ",Object(a.b)("inlineCode",{parentName:"li"},"204")," HTTP status code."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"@RespondItem"),": Sends the returned value of the decorated route handler with ",Object(a.b)("inlineCode",{parentName:"li"},"200")," HTTP status code."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"@RespondPaginated"),": Sends the returned paginated response of the decorated route handler along with pagination metadata with ",Object(a.b)("inlineCode",{parentName:"li"},"200")," HTTP status code.")),Object(a.b)("p",null,"If you are using any of these decorators to send API responses, you do not need to add the ",Object(a.b)("inlineCode",{parentName:"p"},"@CatchAsync")," decorator, as these decorators also perform the same action as the ",Object(a.b)("inlineCode",{parentName:"p"},"@CatchAsync")," decorator in case any exception occurs."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"\nimport { Route, ApiController } from 'core/controllers';\nimport { RespondCreated } from 'core/utils';\n\n@ApiController('/my-resource')\nexport class ApiAuthController extends APIBaseController {\n\n    @Route({\n        method: HTTPMethods.Post,\n        path: '/',\n    })\n    @RespondCreated(true) // returns the newly created response since true is passed as the first parameter\n                          // Also handles any exceptions that occur  \n    createMyResource(req: Request, res: Response) {\n        // return the created resource\n    }\n}\n\n")))}void 0!==p&&p&&p===Object(p)&&Object.isExtensible(p)&&!Object.prototype.hasOwnProperty.call(p,"__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/controller-error-handling.mdx"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-controller-error-handling-mdx-784469ebac7c2e74a0ec.js.map