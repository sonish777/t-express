(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{Dye6:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return i})),n.d(t,"default",(function(){return b}));var o=n("IKa1"),a=n("Yh9w"),s=(n("r0ML"),n("V0Ug")),r=n("sN0p");n("xH0s");const c=["components"],i={};void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&!Object.prototype.hasOwnProperty.call(i,"__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/queue-consumer.mdx"}});const m={_frontmatter:i},u=r.a;function b(e){let{components:t}=e,n=Object(a.a)(e,c);return Object(s.b)(u,Object(o.a)({},m,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("h1",{id:"queue---consumer"},"Queue - Consumer"),Object(s.b)("p",null,"The ",Object(s.b)("inlineCode",{parentName:"p"},"Consumer")," is responsible for consuming the messages passed to different queues. Texpress comes with a separate application for consuming queues. To create a consumer, create your consumer class by extending the ",Object(s.b)("inlineCode",{parentName:"p"},"Consumer")," class imported from the ",Object(s.b)("inlineCode",{parentName:"p"},"rabbitmq")," package. Then register your message handler by decorating the methods using the ",Object(s.b)("inlineCode",{parentName:"p"},"@Consume")," decorator. The ",Object(s.b)("inlineCode",{parentName:"p"},"@Consume")," decorator takes two arguments, the name of the exchange and the name of the routing key the queue is binded to."),Object(s.b)("blockquote",null,Object(s.b)("p",{parentName:"blockquote"},"Make sure to start the consumer application to start consuming the messages.")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript"},"\nimport { ConsumeMessage } from 'amqplib';\nimport { Consume, Consumer } from 'rabbitmq';\n\nexport class ActivityLogConsumer extends Consumer {\n\n    @Consume('CMS_EXCHANGE', 'activity_log')\n    async onActivityLog(message: ConsumeMessage) {\n        const activityLogPayload = JSON.parse(message.content.toString());\n        console.log(\"Payload consumed on activity_log queue\", activityLogPayload);\n    }\n}\n\n")),Object(s.b)("p",null,"Above example registers the ",Object(s.b)("inlineCode",{parentName:"p"},"onActivityLog")," method as the message handler for all the messages that lands on the ",Object(s.b)("inlineCode",{parentName:"p"},"activity_log")," queue in the 'CMS_EXCHANGE' exchange. "))}void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!Object.prototype.hasOwnProperty.call(b,"__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/queue-consumer.mdx"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-queue-consumer-mdx-c3124b6b5512e601f512.js.map