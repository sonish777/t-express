{"version":3,"sources":["webpack:///../src/docs/services.mdx"],"names":["_frontmatter","Object","isExtensible","prototype","hasOwnProperty","call","defineProperty","configurable","value","name","filename","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"mappings":"yRAMaA,EAAe,QAAG,IAAAA,UAAAC,OAAAD,IAAAC,OAAAC,aAAAF,KAAAC,OAAAE,UAAAC,eAAAC,KAAAL,EAAA,eAAAC,OAAAK,eAAAN,EAAA,cAAAO,cAAA,EAAAC,MAAA,CAAAC,KAAA,eAAAC,SAAA,2BAC/B,MAAMC,EAAc,CAClBX,gBAEIY,EAAYC,IACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIE,EAAKC,YAAAH,EAAAI,GAER,OAAOC,YAACR,EAASS,YAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,cAG5EF,YAAA,MACE,GAAM,YAAU,YAElBA,YAAA,iaACAA,YAAA,WAAKA,YAAA,QAAMG,WAAW,MAClB,UAAa,uBAAqB,4EAMtCH,YAAA,0BAAqBA,YAAA,cAAYG,WAAW,KAAG,UAAwB,uFAAwFH,YAAA,cAAYG,WAAW,KAAG,cAA4B,4BAA6BH,YAAA,cAAYG,WAAW,KAAG,UAAwB,aACpSH,YAAA,MACE,GAAM,sBAAoB,sBAE5BA,YAAA,gDAA2CA,YAAA,cAAYG,WAAW,KAAG,cAA4B,oGACjGH,YAAA,WAAKA,YAAA,QAAMG,WAAW,MAClB,UAAa,uBAAqB,iMAUtCH,YAAA,kDAA6CA,YAAA,cAAYG,WAAW,KAAG,eAA6B,2MAGvG,IAAAT,UAAAb,OAAAa,IAAAb,OAAAC,aAAAY,KAAAb,OAAAE,UAAAC,eAAAC,KAAAS,EAAA,eAAAb,OAAAK,eAAAQ,EAAA,cAAAP,cAAA,EAAAC,MAAA,CAAAC,KAAA,aAAAC,SAAA,2BAEDI,EAAWU,gBAAiB","file":"component---src-docs-services-mdx-f6a6e6261e40b81de45f.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"C:/Users/Sonish Maharjan/Desktop/texpress/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"services\"\n    }}>{`Services`}</h1>\n    <p>{`Services are typically classes designed to be injected into controllers that provide functionalites to be used across multiple controllers. Services can be used to encapsulate business logic, perform database operations, or manage third-party integrations. By separating this functionality into services, controllers become simpler and more focused on handling incoming requests and generating responses.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { Service } from 'typedi';\n\n@Service()\nclass AuthService {}\n`}</code></pre>\n    <p>{`Texpress uses `}<inlineCode parentName=\"p\">{`typedi`}</inlineCode>{` to manage dependency injection. To make a service injectable, decorate it with the `}<inlineCode parentName=\"p\">{`@Service()`}</inlineCode>{` decorotor imported from `}<inlineCode parentName=\"p\">{`typedi`}</inlineCode>{` package.`}</p>\n    <h2 {...{\n      \"id\": \"injecting-services\"\n    }}>{`Injecting Services`}</h2>\n    <p>{`Services marked as injectable using `}<inlineCode parentName=\"p\">{`@Service()`}</inlineCode>{` decorator can be injected in controllers or even other services that need thier functionalites.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\n@Controller('/auth')\nclass AuthController {\n\n    // AuthService instance is injected to this.authService property\n    constructor(private readonly authService: AuthService) {}\n}\n\n`}</code></pre>\n    <p>{`In above example, the type annotation `}<inlineCode parentName=\"p\">{`AuthService`}</inlineCode>{` is used to inject its instance. This is constructor based way of injecting services. There are other ways to inject services too, please refer to the official documentation of typedi for this.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}