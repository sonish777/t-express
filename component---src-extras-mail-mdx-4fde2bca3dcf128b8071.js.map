{"version":3,"sources":["webpack:///../src/extras/mail.mdx","webpack:///../src/images/mail-preview.png"],"names":["_frontmatter","Object","isExtensible","prototype","hasOwnProperty","call","defineProperty","configurable","value","name","filename","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","src","require","style","isMDXComponent","module","exports"],"mappings":"2RAMaA,EAAe,QAAG,IAAAA,UAAAC,OAAAD,IAAAC,OAAAC,aAAAF,KAAAC,OAAAE,UAAAC,eAAAC,KAAAL,EAAA,eAAAC,OAAAK,eAAAN,EAAA,cAAAO,cAAA,EAAAC,MAAA,CAAAC,KAAA,eAAAC,SAAA,yBAC/B,MAAMC,EAAc,CAClBX,gBAEIY,EAAYC,IACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIE,EAAKC,YAAAH,EAAAI,GAER,OAAOC,YAACR,EAASS,YAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,cAG5EF,YAAA,MACE,GAAM,QAAM,QAEdA,YAAA,gCAA2BA,YAAA,cAAYG,WAAW,KAAG,UAAwB,0EAA2EH,YAAA,cAAYG,WAAW,KAAG,cAA4B,0EACpJH,YAAA,MAAIG,WAAW,MAAS,8EACVH,YAAA,cAAYG,WAAW,KAAG,QAAsB,0LACxHH,YAAA,MACE,GAAM,mCAAiC,mCAEzCA,YAAA,sBAAiBA,YAAA,cAAYG,WAAW,KAAG,UAAwB,iLACnEH,YAAA,WAAKA,YAAA,QAAMG,WAAW,MAClB,UAAa,uBAAqB,4TAatCH,YAAA,MACE,GAAM,sCAAoC,sCAE5CA,YAAA,qCAAgCA,YAAA,cAAYG,WAAW,KAAG,UAAwB,oDAAqDH,YAAA,cAAYG,WAAW,KAAG,UAAwB,4BAA6BH,YAAA,cAAYG,WAAW,KAAG,UAAwB,mDAAoDH,YAAA,cAAYG,WAAW,KAAG,mBAAiC,6DAA8DH,YAAA,cAAYG,WAAW,KAAG,mBAAiC,yCAA0CH,YAAA,cAAYG,WAAW,KAAG,QAAsB,8HAA+HH,YAAA,cAAYG,WAAW,KAAG,QAAsB,8DAA+DH,YAAA,cAAYG,WAAW,KAAG,eAA6B,uBAC/2BH,YAAA,WAAKA,YAAA,QAAMG,WAAW,MAClB,UAAa,uBAAqB,kQAYtCH,YAAA,mGAA8FA,YAAA,cAAYG,WAAW,KAAG,cAA4B,oBAAqBH,YAAA,MAAIG,WAAW,MAAS,gCAEjMH,YAAA,WAAKA,YAAA,QAAMG,WAAW,MAClB,UAAa,uBAAqB,ieAmBtCH,YAAA,MACE,GAAM,gBAAc,gBAEtBA,YAAA,iIAA4HA,YAAA,cAAYG,WAAW,KAAG,aAA2B,iBAAkBH,YAAA,cAAYG,WAAW,KAAG,eAA6B,4CAA6CH,YAAA,cAAYG,WAAW,KAAG,YAA0B,uCAAwCH,YAAA,cAAYG,WAAW,KAAG,cAA4B,yIACzbH,YAAA,0GAAqGA,YAAA,cAAYG,WAAW,KAAG,eAA6B,sGAC5JH,YAAA,2DACAA,YAAA,OAAKI,IAAKC,EAAQ,QAA+BC,MAAO,CACtD,MAAS,eAId,IAAAZ,UAAAb,OAAAa,IAAAb,OAAAC,aAAAY,KAAAb,OAAAE,UAAAC,eAAAC,KAAAS,EAAA,eAAAb,OAAAK,eAAAQ,EAAA,cAAAP,cAAA,EAAAC,MAAA,CAAAC,KAAA,aAAAC,SAAA,yBAEDI,EAAWa,gBAAiB,G,uBC9F5BC,EAAOC,QAAU,IAA0B","file":"component---src-extras-mail-mdx-4fde2bca3dcf128b8071.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"C:/Users/Sonish Maharjan/Desktop/texpress/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"mail\"\n    }}>{`Mail`}</h1>\n    <p>{`Texpress provides a `}<inlineCode parentName=\"p\">{`Mailer`}</inlineCode>{` utility shared class that simplifies sending email messages using the `}<inlineCode parentName=\"p\">{`nodemailer`}</inlineCode>{` library.\nYou'll need to create email templates before sending emails.`}<br parentName=\"p\"></br>{`\n`}{`Email templates are stored in the database and identified by a unique `}<inlineCode parentName=\"p\">{`code`}</inlineCode>{`. When sending an email, the Mailer instance retrieves the email template from the database , and then parses the email template using the parseTemplate method with the dynamic data.`}</p>\n    <h2 {...{\n      \"id\": \"mailer-credential-prerequisites\"\n    }}>{`Mailer Credential Prerequisites`}</h2>\n    <p>{`Since the `}<inlineCode parentName=\"p\">{`Mailer`}</inlineCode>{` utility uses STMP, you'll need to create STMP credentials to be used for sending email. These credentials are set in the configuration json files under the following names,`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`{\n    // other configs,\n    \"mail\": {\n        \"host\": // host of the mail server,\n        \"port\": // port of the mail server,\n        \"username\": // smtp username\n        \"password\": // smtp password\n        \"secure\": // stmp secure (true/false)\n        \"from\": // default from email address\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"creating-mailers-and-sending-mails\"\n    }}>{`Creating Mailers and Sending Mails`}</h2>\n    <p>{`To send emails using the `}<inlineCode parentName=\"p\">{`Mailer`}</inlineCode>{` utility, create your mailer class extending the `}<inlineCode parentName=\"p\">{`Mailer`}</inlineCode>{` and create a method say `}<inlineCode parentName=\"p\">{`send()`}</inlineCode>{` to send the email. To send the email, call the `}<inlineCode parentName=\"p\">{`parseTemplate()`}</inlineCode>{` method to get the email template from the database (uses `}<inlineCode parentName=\"p\">{`email_templates`}</inlineCode>{` table in the database) with matching `}<inlineCode parentName=\"p\">{`code`}</inlineCode>{`, and pass the data as the second argument that needs to be replaced in placeholders in that email template. Also, set the `}<inlineCode parentName=\"p\">{`'to'`}</inlineCode>{` property to receiver's email address and finally call the `}<inlineCode parentName=\"p\">{`sendEmail()`}</inlineCode>{` to send the email.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\nclass SendOTPMailer extends Mailer {\n    private readonly code = 'SEND_OTP';\n    async send(data: Record<string, string>) {\n        (await this.parseTemplate(this.code, data))\n            .to(data.to_email)\n            .sendEmail();\n    }\n}\n\n`}</code></pre>\n    <p>{`Above example creates a OTP mailer that sends an email with template matching the code `}<inlineCode parentName=\"p\">{`'SEND_OTP'`}</inlineCode>{` in the database.`}<br parentName=\"p\"></br>{`\n`}{`Now, to send the email.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\nclass AuthService {\n    constructor(\n        // Inject the mailer instance\n        // Make sure to decorate your mailer by typedi's @Service decorator to make them injectable\n        private readonly sendOtpMailer: SendOTPMailer\n    ) {}\n\n    doSomethingAndSendEmail() {\n        // do \\`something\\`\n        this.sendOtpMailer.send({\n            to_email: 'receiver@email.goes.here',\n            // other data needed in the email template.\n        });\n    }\n}\n\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"mail-preview\"\n    }}>{`Mail Preview`}</h2>\n    <p>{`During development, it may be useful to only preview the email instead of actually sending it. For this purpose, the `}<inlineCode parentName=\"p\">{`sendEmail`}</inlineCode>{` method has a `}<inlineCode parentName=\"p\">{`previewOnly`}</inlineCode>{` option that is true by default when the `}<inlineCode parentName=\"p\">{`NODE_ENV`}</inlineCode>{` environment variable is not set to `}<inlineCode parentName=\"p\">{`production`}</inlineCode>{`. The local email preview shows how the email will look when it is sent, and can be useful for testing and debugging email templates.`}</p>\n    <p>{`However, if you wish to send the email even in a non-production environment, you can pass the `}<inlineCode parentName=\"p\">{`previewOnly`}</inlineCode>{` option as false to force the sendEmail method to send the email using the configured transporter.`}</p>\n    <p>{`The mail preview may look something like this:`}</p>\n    <img src={require('../images/mail-preview.png')} style={{\n      \"width\": \"70%\"\n    }} />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","module.exports = __webpack_public_path__ + \"static/mail-preview-c4b637038ffd530202106103084fd1f2.png\";"],"sourceRoot":""}