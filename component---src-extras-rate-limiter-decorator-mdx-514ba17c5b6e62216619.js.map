{"version":3,"sources":["webpack:///../src/extras/rate-limiter-decorator.mdx"],"names":["_frontmatter","Object","isExtensible","prototype","hasOwnProperty","call","defineProperty","configurable","value","name","filename","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"mappings":"yRAMaA,EAAe,QAAG,IAAAA,UAAAC,OAAAD,IAAAC,OAAAC,aAAAF,KAAAC,OAAAE,UAAAC,eAAAC,KAAAL,EAAA,eAAAC,OAAAK,eAAAN,EAAA,cAAAO,cAAA,EAAAC,MAAA,CAAAC,KAAA,eAAAC,SAAA,2CAC/B,MAAMC,EAAc,CAClBX,gBAEIY,EAAYC,IACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIE,EAAKC,YAAAH,EAAAI,GAER,OAAOC,YAACR,EAASS,YAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,cAG5EF,YAAA,MACE,GAAM,iCAA+B,iCAEvCA,YAAA,qCAAgCA,YAAA,cAAYG,WAAW,KAAG,aAA2B,qCAAsCH,YAAA,cAAYG,WAAW,KAAG,aAA2B,gWAAiWH,YAAA,cAAYG,WAAW,KAAG,YAA0B,oCACrkBH,YAAA,MACE,GAAM,qCAAmC,qCAE3CA,YAAA,gBAAWA,YAAA,cAAYG,WAAW,KAAG,aAA2B,mHAAoHH,YAAA,cAAYG,WAAW,KAAG,sBAAoC,kBAAmBH,YAAA,cAAYG,WAAW,KAAG,sBAAoC,gJAAiJH,YAAA,cAAYG,WAAW,KAAG,sBAAoC,IAAKH,YAAA,MAAIG,WAAW,MAAS,kHAE/iBH,YAAA,WAAKA,YAAA,QAAMG,WAAW,MAClB,UAAa,uBAAqB,sQAYtCH,YAAA,sEAAiEA,YAAA,cAAYG,WAAW,KAAG,WAAyB,2BAA4BH,YAAA,cAAYG,WAAW,KAAG,cAA4B,qCAAsCH,YAAA,cAAYG,WAAW,KAAG,cAA4B,4BAClSH,YAAA,MACE,GAAM,yCAAuC,yCAE/CA,YAAA,4OAAuOA,YAAA,MAAIG,WAAW,MAAS,KACjQH,YAAA,UAAQG,WAAW,KAAG,8GACpBH,YAAA,MACE,GAAM,WAAS,WAEjBA,YAAA,8GACAA,YAAA,WAAKA,YAAA,QAAMG,WAAW,MAClB,UAAa,uBAAqB,qVAatCH,YAAA,kCAA6BA,YAAA,cAAYG,WAAW,KAAG,SAAuB,+EAAgFH,YAAA,cAAYG,WAAW,KAAG,aAA2B,yJAA0JH,YAAA,cAAYG,WAAW,KAAG,SAAuB,oFAAqFH,YAAA,cAAYG,WAAW,KAAG,OAAqB,2CAA4CH,YAAA,cAAYG,WAAW,KAAG,mBAAiC,IAAKH,YAAA,MAAIG,WAAW,MAAS,yGACnkBH,YAAA,cAAYG,WAAW,KAAG,2BAAyC,KACtKH,YAAA,gBAAWA,YAAA,cAAYG,WAAW,KAAG,QAAsB,gBAAiBH,YAAA,cAAYG,WAAW,KAAG,aAA2B,4DAA6DH,YAAA,cAAYG,WAAW,KAAG,UAAwB,+BAAgCH,YAAA,KAAGG,WAAW,IAC1R,KAAQ,8EACPH,YAAA,cAAYG,WAAW,KAAG,SAAuB,cAAkB,yEAG3E,IAAAT,UAAAb,OAAAa,IAAAb,OAAAC,aAAAY,KAAAb,OAAAE,UAAAC,eAAAC,KAAAS,EAAA,eAAAb,OAAAK,eAAAQ,EAAA,cAAAP,cAAA,EAAAC,MAAA,CAAAC,KAAA,aAAAC,SAAA,2CAEDI,EAAWU,gBAAiB","file":"component---src-extras-rate-limiter-decorator-mdx-514ba17c5b6e62216619.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"C:/Users/Sonish Maharjan/Desktop/texpress/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"rate-limiting-with-decorators\"\n    }}>{`Rate Limiting with Decorators`}</h1>\n    <p>{`Texpress also provides a `}<inlineCode parentName=\"p\">{`@Throttle`}</inlineCode>{` decorator for rate limiting. The `}<inlineCode parentName=\"p\">{`@Throttle`}</inlineCode>{` decorator provides a convenient way to apply rate limiting to specific methods or endpoints in an application, without having to manually call the RateLimiterService every time. Using the RateLimiterService directly may be more suitable in situations where more granular control over the rate limiting configuration is required. In most cases, the `}<inlineCode parentName=\"p\">{`Throttle`}</inlineCode>{` decorator should be sufficient.`}</p>\n    <h2 {...{\n      \"id\": \"using-the-rate-limiting-decorator\"\n    }}>{`Using the Rate Limiting Decorator`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`@Throttle`}</inlineCode>{` decorator takes two arguments, the key to used for throtting the request as the first argument and an optional `}<inlineCode parentName=\"p\">{`RateLimiterOptions`}</inlineCode>{` argument. The `}<inlineCode parentName=\"p\">{`RateLimiterOptions`}</inlineCode>{` is an object that has 3 optional properties, attempts, windowDuration, and blockDuration. These values are the same as the ones used by the `}<inlineCode parentName=\"p\">{`RateLimiterService`}</inlineCode>{`.`}<br parentName=\"p\"></br>{`\n`}{`These arguments, if not provided, will fallback to the default values set in the configuration JSON file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`class AuthService {\n    @Throttle('login', {\n        attempts: 5,\n        windowDuration: 10,\n        blockDuration: 10,\n    })\n    async login(username: string, password: string) {\n        // Log in the user with the provided credentials\n    }\n}\n`}</code></pre>\n    <p>{`In above example, if the login method is called more than `}<inlineCode parentName=\"p\">{`5 times`}</inlineCode>{` within the duration of `}<inlineCode parentName=\"p\">{`10 seconds`}</inlineCode>{`, the request will be blocked for `}<inlineCode parentName=\"p\">{`10 seconds`}</inlineCode>{` for any login attempts.`}</p>\n    <h2 {...{\n      \"id\": \"generating-dynamic-rate-limiting-keys\"\n    }}>{`Generating Dynamic Rate Limiting Keys`}</h2>\n    <p>{`In some cases, you might need to limit the request rate based on dynamically generated keys. Keys can be generated dynamically using the arguments passed to the method, and applying your key generation logic with those data.`}<br parentName=\"p\"></br>{`\n`}<strong parentName=\"p\">{`To do this, pass a callback method as the first argument that takes the same argument list as the method.`}</strong></p>\n    <h3 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h3>\n    <p>{`Consider a scenario where you need to rate limit the login route based on the request IP Address.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`@Controller('/auth')\nclass AuthController {\n    @Route({ path: '/login', method: HTTPMethods.Post })\n    @Throttle<AuthController, 'login'>((req) => \\`login_ip:\\${req.ip}\\`, {\n        attempts: 2,\n        blockDuration: 20,\n    })\n    async login(req: Request) {\n        // Log in the user based on provided credentials\n    }\n}\n`}</code></pre>\n    <p>{`In above example, the `}<inlineCode parentName=\"p\">{`login`}</inlineCode>{` route when accessed is rate limited based on the requested IP Address. The `}<inlineCode parentName=\"p\">{`@Throttle`}</inlineCode>{` decorator takes an key generation callback method as the first argument, that takes the same argument list as the method it is being applied to i.e. `}<inlineCode parentName=\"p\">{`login`}</inlineCode>{`. Therefore, both the callback key generation method, and the login method takes `}<inlineCode parentName=\"p\">{`req`}</inlineCode>{` as the first argument which is of type `}<inlineCode parentName=\"p\">{`Express.Request`}</inlineCode>{`.`}<br parentName=\"p\"></br>{`\n`}{`If the requesting IP Address is 127.12.09.01 then the rate limiting key for this request will be `}<inlineCode parentName=\"p\">{`'login_ip:127.12.09.01'`}</inlineCode>{`.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Type`}</inlineCode>{` argument in `}<inlineCode parentName=\"p\">{`@Throttle`}</inlineCode>{` decorator are passed the same way as they are passed in `}<inlineCode parentName=\"p\">{`@Cache`}</inlineCode>{` decorator. Please refer to `}<a parentName=\"p\" {...{\n        \"href\": \"./cache-decorator#understanding-the-type-arguments-authservice-getuserbyid\"\n      }}><inlineCode parentName=\"a\">{`Cache`}</inlineCode>{` Decorator`}</a>{` if you want to understand how these type arguments are passed.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}